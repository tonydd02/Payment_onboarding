"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Authorization API', () => {
    let client;
    let authorizationID;
    let testVoidID;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test('Test: Create an authorization', () => __awaiter(void 0, void 0, void 0, function* () {
        const authorizationRequest = {
            source: "PIe2YvpcjvoVJ6PzoRPBK137",
            merchant: "MUeDVrf2ahuKc9Eg5TeZugvs",
            tags: {
                "order_number": "21DFASJSAKAS"
            },
            currency: api_1.Models.Currency.Usd,
            amount: 100
        };
        // try {
        const createdAuthorization = yield client.Authorizations.create(authorizationRequest);
        authorizationID = createdAuthorization.id;
        expect(createdAuthorization.amount).toBe(authorizationRequest.amount);
        expect(createdAuthorization.source).toBe(authorizationRequest.source);
        expect(createdAuthorization.state).toBe("SUCCEEDED");
        expect(createdAuthorization.application).toBe("APgPDQrLD52TYvqazjHJJchM");
        // }
        // catch (err){
        //     console.log(err)
        // }
    }));
    test('Test: Create an authorization with 3D Secure', () => __awaiter(void 0, void 0, void 0, function* () {
        const authorizationRequest = {
            source: "PIe2YvpcjvoVJ6PzoRPBK137",
            merchant: "MUeDVrf2ahuKc9Eg5TeZugvs",
            tags: {
                "order_number": "21DFASJSAKAS"
            },
            currency: api_1.Models.Currency.Usd,
            amount: 100,
            _3dSecureAuthentication: {
                electronicCommerceIndicator: "AUTHENTICATED",
                cardholderAuthentication: "BwABBJQ1AgAAAAAgJDUCAAAAAAA",
                transactionId: "EaOMucALHQqLAEGAgk"
            }
        };
        const createdAuthorization = yield client.Authorizations.create(authorizationRequest);
        expect(createdAuthorization.amount).toBe(authorizationRequest.amount);
        expect(createdAuthorization.source).toBe(authorizationRequest.source);
        expect(createdAuthorization.state).toBe("SUCCEEDED");
        expect(createdAuthorization.application).toBe("APgPDQrLD52TYvqazjHJJchM");
    }));
    test('Test: Create an authorization with Level 2 processing', () => __awaiter(void 0, void 0, void 0, function* () {
        const authorizationRequest = {
            source: "PIe2YvpcjvoVJ6PzoRPBK137",
            merchant: "MUeDVrf2ahuKc9Eg5TeZugvs",
            tags: {
                "order_number": "21DFASJSAKAS"
            },
            currency: api_1.Models.Currency.Usd,
            amount: 100,
            additionalPurchaseData: {
                customerReferenceNumber: "321xyz",
                salesTax: 200
            }
        };
        const createdAuthorization = yield client.Authorizations.create(authorizationRequest);
        expect(createdAuthorization.amount).toBe(authorizationRequest.amount);
        expect(createdAuthorization.source).toBe(authorizationRequest.source);
        expect(createdAuthorization.state).toBe("SUCCEEDED");
        expect(createdAuthorization.application).toBe("APgPDQrLD52TYvqazjHJJchM");
    }));
    test('Test: Create an authorization with Level 3 processing', () => __awaiter(void 0, void 0, void 0, function* () {
        const authorizationRequest = {
            source: "PIe2YvpcjvoVJ6PzoRPBK137",
            merchant: "MUeDVrf2ahuKc9Eg5TeZugvs",
            tags: {
                "order_number": "21DFASJSAKAS"
            },
            currency: api_1.Models.Currency.Usd,
            amount: 100,
            additionalPurchaseData: {
                itemData: [{
                        amountIncludingSalesTax: 500,
                        amountExcludingSalesTax: 400,
                        costPerUnit: 500,
                        unitOfMeasure: "BX",
                        merchantProductCode: "1149611",
                        commodityCode: "175-62-20",
                        itemDiscountAmount: 100,
                        quantity: 1,
                        itemDescription: "printing paper"
                    }],
                discountAmount: 100,
                customerReferenceNumber: "321xyz",
                shippingAmount: 100,
                customsDutyAmount: 10
            }
        };
        const createdAuthorization = yield client.Authorizations.create(authorizationRequest);
        testVoidID = createdAuthorization.id;
        expect(createdAuthorization.amount).toBe(authorizationRequest.amount);
        expect(createdAuthorization.source).toBe(authorizationRequest.source);
        expect(createdAuthorization.state).toBe("SUCCEEDED");
        expect(createdAuthorization.application).toBe("APgPDQrLD52TYvqazjHJJchM");
    }));
    test('Test: Capture an authorization', () => __awaiter(void 0, void 0, void 0, function* () {
        const updateRequest = {
            fee: 0,
            captureAmount: 100
        };
        const capturedAuthorization = yield client.Authorizations.update(authorizationID, updateRequest);
        expect(capturedAuthorization.id).toBe(authorizationID);
        expect(capturedAuthorization.amount).toBe(updateRequest.captureAmount);
        expect(capturedAuthorization.source).toBe("PIe2YvpcjvoVJ6PzoRPBK137");
    }));
    test('Test: Capture an authorization with Level 3 processing', () => __awaiter(void 0, void 0, void 0, function* () {
        const capturedAuthorization = yield client.Authorizations.update(authorizationID, {
            additionalPurchaseData: {
                itemData: [{
                        amountIncludingSalesTax: 500,
                        amountExcludingSalesTax: 400,
                        costPerUnit: 500,
                        unitOfMeasure: "BX",
                        merchantProductCode: "1149611",
                        commodityCode: "175-62-20",
                        itemDiscountAmount: 100,
                        quantity: 1,
                        itemDescription: "printing paper"
                    }],
                customerReferenceNumber: "321xyz"
            }
        });
        expect(capturedAuthorization.id).toBe(authorizationID);
        expect(capturedAuthorization.source).toBe("PIe2YvpcjvoVJ6PzoRPBK137");
    }));
    test('Test: Void an authorization', () => __awaiter(void 0, void 0, void 0, function* () {
        const updateRequest = {
            voidMe: true
        };
        const voidedAuthorization = yield client.Authorizations.update(testVoidID, updateRequest);
        expect(voidedAuthorization.id).toBe(testVoidID);
        expect(voidedAuthorization.state).toBe("SUCCEEDED");
        expect(voidedAuthorization.source).toBe("PIe2YvpcjvoVJ6PzoRPBK137");
    }));
    test('Test: Fetch an authorization', () => __awaiter(void 0, void 0, void 0, function* () {
        const fetchedAuthorization = yield client.Authorizations.get(authorizationID);
        expect(fetchedAuthorization.id).toBe(authorizationID);
        expect(fetchedAuthorization.amount).toBe(100);
        expect(fetchedAuthorization.source).toBe("PIe2YvpcjvoVJ6PzoRPBK137");
    }));
    test("Test: List all authorization", () => __awaiter(void 0, void 0, void 0, function* () {
        const authorizationList = yield client.Authorizations.list({
            limit: 2
        }, { headers: { ["Content-Type"]: "application/vnd.json+api", ["Finix-Version"]: "2022-02-01" } });
        expect(authorizationList.page.limit).toEqual(expect.any(Number));
        expect(authorizationList.page.nextCursor).toEqual(expect.any(String));
        expect(authorizationList.size).toEqual(expect.any(Number));
        if (authorizationList.hasMore) {
            const nextAuthorizationList = yield authorizationList.listNext();
            expect(nextAuthorizationList.page.limit).toEqual(expect.any(Number));
            expect(nextAuthorizationList.page.nextCursor).toEqual(expect.any(String));
            expect(nextAuthorizationList.size).toEqual(expect.any(Number));
        }
    }));
});
//# sourceMappingURL=authorizations.test.js.map