"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Fee Profiles API', () => {
    let client;
    let feeProfileId;
    // let identityId: string;
    beforeAll(() => {
        const userName = 'USimz3zSq5R2PqiEBXY6rSiJ';
        const password = '8bacba32-9550-48ff-b567-fe7648947041';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create a fee profile", () => __awaiter(void 0, void 0, void 0, function* () {
        const createFeeProfileRequest = {
            achFixedFee: 30,
            basisPoints: 200,
            application: "APmuwPBaW8pVcwb4vCTHQH32",
            chargeInterchange: false,
            fixedFee: 100,
            achBasisPoints: 300
        };
        const feeProfile = yield client.FeeProfiles.create(createFeeProfileRequest);
        feeProfileId = feeProfile.id;
        expect(feeProfile.basisPoints).toBe(createFeeProfileRequest.basisPoints);
        expect(feeProfile.application).toBe(createFeeProfileRequest.application);
        expect(feeProfile.fixedFee).toBe(createFeeProfileRequest.fixedFee);
    }));
    test("Test: Get fee profile", () => __awaiter(void 0, void 0, void 0, function* () {
        const fetchedFeeProfile = yield client.FeeProfiles.get(feeProfileId);
        expect(fetchedFeeProfile.id).toBe(feeProfileId);
    }));
    test("Test: List all fee profiles", () => __awaiter(void 0, void 0, void 0, function* () {
        const feeProfileList = yield client.FeeProfiles.list();
        expect(feeProfileList.page.limit).toEqual(expect.any(Number));
        if (feeProfileList.page.hasOwnProperty('offset')) {
            expect(feeProfileList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (feeProfileList.page.nextCursor != undefined) {
                expect(feeProfileList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(feeProfileList.size).toEqual(expect.any(Number));
        if (feeProfileList.hasMore) {
            const nextFeeList = yield feeProfileList.listNext();
            expect(nextFeeList.page.limit).toEqual(expect.any(Number));
            expect(nextFeeList.size).toEqual(expect.any(Number));
        }
    }));
});
//# sourceMappingURL=feeProfiles.test.js.map