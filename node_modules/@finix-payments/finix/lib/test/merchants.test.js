"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Merchants API', () => {
    let client;
    let merchantID;
    let identityId;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Provision a merchant", () => __awaiter(void 0, void 0, void 0, function* () {
        const createIdentityRequest = {
            additionalUnderwritingData: {
                merchantAgreementAccepted: true,
                merchantAgreementIpAddress: "42.1.1.113",
                averageAchTransferAmount: 200000,
                annualAchVolume: 200000,
            },
            tags: {
                "Studio Rating": "4.7"
            },
            entity: {
                lastName: "Sunkhronos",
                firstName: "dwayne",
                email: "user@example.org",
                phone: "1234567890"
            }
        };
        const createdIdentity = yield client.Identities.create(createIdentityRequest);
        identityId = createdIdentity.id;
        const paymentRequest = {
            accountType: api_1.Models.CreatePaymentInstrumentRequest.AccountTypeEnum.Savings,
            name: "Alice",
            tags: {
                "Bank Account": "Company Account"
            },
            country: "USA",
            bankCode: "123123123",
            accountNumber: "123123123",
            type: api_1.Models.CreatePaymentInstrumentRequest.TypeEnum.BankAccount,
            identity: identityId
        };
        yield client.PaymentInstruments.create(paymentRequest);
        const MerchantRequest = {
            processor: "DUMMY_V1",
            tags: {
                "key_2": "value_2"
            }
        };
        const createdMerchant = yield client.Merchants.create(identityId, MerchantRequest);
        merchantID = createdMerchant.id;
        expect(createdMerchant.identity).toBe(identityId);
        expect(createdMerchant.application).toBe("APgPDQrLD52TYvqazjHJJchM");
        expect(createdMerchant.processor).toBe(MerchantRequest.processor);
    }));
    test("Test: Fetch a merchant", () => __awaiter(void 0, void 0, void 0, function* () {
        const fetchedMerchant = yield client.Merchants.get(merchantID);
        expect(fetchedMerchant.identity).toBe(identityId);
        expect(fetchedMerchant.processor).toBe("DUMMY_V1");
        expect(fetchedMerchant.application).toBe("APgPDQrLD52TYvqazjHJJchM");
    }));
    test("Test: Reattempt merchant provisioning", () => __awaiter(void 0, void 0, void 0, function* () {
        const reattemptedMerchantVerification = yield client.Merchants.createMerchantVerification(merchantID, {});
        expect(reattemptedMerchantVerification.merchant).toBe(merchantID);
        expect(reattemptedMerchantVerification.application).toBe("APgPDQrLD52TYvqazjHJJchM");
        expect(reattemptedMerchantVerification.processor).toBe("DUMMY_V1");
    }));
    test("Test: Update merchant to enable Level 2/Level 3 processing", () => __awaiter(void 0, void 0, void 0, function* () {
        const client2 = new api_1.Client("UStxEci4vXxGDWLQhNvao7YY", "25038781-2369-4113-8187-34780e91052e");
        const updatedMerchant = yield client2.Merchants.update(merchantID, {
            levelTwoLevelThreeDataEnabled: true
        });
        expect(updatedMerchant.id).toBe(merchantID);
        expect(updatedMerchant.application).toBe("APgPDQrLD52TYvqazjHJJchM");
        expect(updatedMerchant.levelTwoLevelThreeDataEnabled).toBe(true);
    }));
    test("Test: List all merchant", () => __awaiter(void 0, void 0, void 0, function* () {
        const merchantList = yield client.Merchants.list();
        expect(merchantList.page.limit).toEqual(expect.any(Number));
        if (merchantList.page.hasOwnProperty('offset')) {
            expect(merchantList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (merchantList.page.nextCursor != undefined) {
                expect(merchantList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(merchantList.size).toEqual(expect.any(Number));
        if (merchantList.hasMore) {
            const nextMerchantList = yield merchantList.listNext();
            expect(nextMerchantList.page.limit).toEqual(expect.any(Number));
            expect(nextMerchantList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: List all merchant verification", () => __awaiter(void 0, void 0, void 0, function* () {
        const merchantVerificationList = yield client.Verifications.listByMerchantId(merchantID);
        expect(merchantVerificationList.page.limit).toEqual(expect.any(Number));
        if (merchantVerificationList.page.hasOwnProperty('offset')) {
            expect(merchantVerificationList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (merchantVerificationList.page.nextCursor != undefined) {
                expect(merchantVerificationList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(merchantVerificationList.size).toEqual(expect.any(Number));
        if (merchantVerificationList.hasMore) {
            const nextMerchantVerificationList = yield merchantVerificationList.listNext();
            expect(nextMerchantVerificationList.page.limit).toEqual(expect.any(Number));
            expect(nextMerchantVerificationList.size).toEqual(expect.any(Number));
        }
    }));
});
//# sourceMappingURL=merchants.test.js.map