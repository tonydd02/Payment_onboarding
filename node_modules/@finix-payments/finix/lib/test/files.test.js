"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const fs = __importStar(require("fs"));
describe('Files API', () => {
    let client;
    let fileId;
    let createFileRequest;
    let externalLinkId;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create a file", () => __awaiter(void 0, void 0, void 0, function* () {
        const fileRequest = {
            displayName: "Driver License test1",
            linkedTo: "MU2n7BSovtwYsWYZF6rBnnzk",
            type: api_1.Models.CreateFileRequest.TypeEnum.DriversLicenseBack,
            tags: {
                "key_1": "value_1"
            }
        };
        createFileRequest = fileRequest;
        const createdFile = yield client.Files.create(fileRequest);
        fileId = createdFile.id;
        expect(createdFile.linkedTo).toBe(fileRequest.linkedTo);
        expect(createdFile.displayName).toBe(fileRequest.displayName);
        expect(createdFile.type).toBe(fileRequest.type);
    }));
    test("Test: Upload files directly", () => __awaiter(void 0, void 0, void 0, function* () {
        const fileName = __dirname.concat("/test.png");
        const fileStream = fs.createReadStream(fileName);
        const uploadedFile = yield client.Files.upload(fileId, {
            file: fileStream
        });
        expect(uploadedFile.id).toBe(fileId);
        expect(uploadedFile.displayName).toBe(createFileRequest.displayName);
        expect(uploadedFile.type).toBe(createFileRequest.type);
    }));
    test("Test: Create an external link", () => __awaiter(void 0, void 0, void 0, function* () {
        const externalLinkRequest = {
            type: api_1.Models.CreateExternalLinkRequest.TypeEnum.Upload,
            duration: 15
        };
        const createdExternalLink = yield client.Files.createExternalLink(fileId, externalLinkRequest);
        externalLinkId = createdExternalLink.id;
        expect(createdExternalLink.type).toBe(externalLinkRequest.type);
        expect(createdExternalLink.fileId).toBe(fileId);
    }));
    test("Test: Download a file", () => __awaiter(void 0, void 0, void 0, function* () {
        const tempFileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        const downloadedFile = yield client.Files.download(tempFileId);
        expect(downloadedFile).toBeDefined();
    }));
    test("Test: Fetch a file", () => __awaiter(void 0, void 0, void 0, function* () {
        const tempFileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        const fetchedFile = yield client.Files.get(tempFileId);
        expect(fetchedFile.id).toBe(tempFileId);
        expect(fetchedFile.status).toBe("UPLOADED");
    }));
    test("Test: List all files", () => __awaiter(void 0, void 0, void 0, function* () {
        const fileList = yield client.Files.list();
        expect(fileList.page.limit).toEqual(expect.any(Number));
        if (fileList.page.hasOwnProperty('offset')) {
            expect(fileList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (fileList.page.nextCursor != undefined) {
                expect(fileList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(fileList.size).toEqual(expect.any(Number));
        if (fileList.hasMore) {
            const nextFileList = yield fileList.listNext();
            expect(nextFileList.page.limit).toEqual(expect.any(Number));
            expect(nextFileList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: Fetch an external link", () => __awaiter(void 0, void 0, void 0, function* () {
        // const tempFileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        const fetchedExternalLink = yield client.Files.getExternalLink(fileId, externalLinkId);
        expect(fetchedExternalLink.fileId).toBe(fileId);
        expect(fetchedExternalLink.type).toBe(api_1.Models.CreateExternalLinkRequest.TypeEnum.Upload);
    }));
    test("Test: List all external links", () => __awaiter(void 0, void 0, void 0, function* () {
        const externalLinksList = yield client.Files.listExternalLinks(fileId);
        expect(externalLinksList.page.limit).toEqual(expect.any(Number));
        if (externalLinksList.page.hasOwnProperty('offset')) {
            expect(externalLinksList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (externalLinksList.page.nextCursor != undefined) {
                expect(externalLinksList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(externalLinksList.size).toEqual(expect.any(Number));
        if (externalLinksList.hasMore) {
            const nextExternalLinksList = yield externalLinksList.listNext();
            expect(nextExternalLinksList.page.limit).toEqual(expect.any(Number));
            expect(nextExternalLinksList.size).toEqual(expect.any(Number));
        }
    }));
});
//# sourceMappingURL=files.test.js.map