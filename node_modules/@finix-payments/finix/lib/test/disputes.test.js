"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
const fs = __importStar(require("fs"));
describe('Dispute API', () => {
    let client;
    let evidenceID;
    let disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Upload dispute evidence", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const fileName = __dirname.concat("/test.png");
        const fileObject = fs.createReadStream(fileName);
        const uploadedDisputeEvidence = yield client.Disputes.createDisputeEvidence(disputeId, {
            file: fileObject
        });
        evidenceID = uploadedDisputeEvidence.id;
        expect(uploadedDisputeEvidence.dispute).toBe(disputeId);
        expect((_a = uploadedDisputeEvidence.tags) === null || _a === void 0 ? void 0 : _a["file-name"]).toBe("test.png");
    }));
    test("Test: Fetch a dispute", () => __awaiter(void 0, void 0, void 0, function* () {
        const disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
        const fetchedDispute = yield client.Disputes.get(disputeId);
        expect(fetchedDispute.id).toBe(disputeId);
        expect(fetchedDispute.amount).toBe(888888);
        expect(fetchedDispute.reason).toBe(api_1.Models.Dispute.ReasonEnum.Fraud);
    }));
    test("Test: List disputes", () => __awaiter(void 0, void 0, void 0, function* () {
        const disputeList = yield client.Disputes.list();
        expect(disputeList.page.limit).toEqual(expect.any(Number));
        if (disputeList.page.hasOwnProperty('offset')) {
            expect(disputeList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (disputeList.page.nextCursor != undefined) {
                expect(disputeList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(disputeList.size).toEqual(expect.any(Number));
        if (disputeList.hasMore) {
            const nextDisputeList = yield disputeList.listNext();
            expect(nextDisputeList.page.limit).toEqual(expect.any(Number));
            expect(nextDisputeList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: Fetch dispute adjustment transfers", () => __awaiter(void 0, void 0, void 0, function* () {
        const disputeAdjTransferList = yield client.Disputes.listDisputesAdjustments(disputeId);
        expect(disputeAdjTransferList.page.limit).toEqual(expect.any(Number));
        if (disputeAdjTransferList.page.hasOwnProperty('offset')) {
            expect(disputeAdjTransferList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (disputeAdjTransferList.page.nextCursor != undefined) {
                expect(disputeAdjTransferList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(disputeAdjTransferList.size).toEqual(expect.any(Number));
        if (disputeAdjTransferList.hasMore) {
            const nextDisputeAdjList = yield disputeAdjTransferList.listNext();
            expect(nextDisputeAdjList.page.limit).toEqual(expect.any(Number));
            expect(nextDisputeAdjList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: Fetch dispute evidence files", () => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        const disputeEvidenceFile = yield client.Disputes.getDisputeEvidence(disputeId, evidenceID);
        expect(disputeEvidenceFile.dispute).toBe(disputeId);
        expect((_b = disputeEvidenceFile.tags) === null || _b === void 0 ? void 0 : _b["file-name"]).toBe("test.png");
        expect(disputeEvidenceFile.id).toBe(evidenceID);
    }));
    test("Test: List dispute evidence files", () => __awaiter(void 0, void 0, void 0, function* () {
        const disputeEvidenceList = yield client.Disputes.listDisputeEvidenceByDisputeId(disputeId);
        expect(disputeEvidenceList.page.limit).toEqual(expect.any(Number));
        if (disputeEvidenceList.page.hasOwnProperty('offset')) {
            expect(disputeEvidenceList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (disputeEvidenceList.page.nextCursor != undefined) {
                expect(disputeEvidenceList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(disputeEvidenceList.size).toEqual(expect.any(Number));
        if (disputeEvidenceList.hasMore) {
            const nextDipusteEvidenceList = yield disputeEvidenceList.listNext();
            expect(nextDipusteEvidenceList.page.limit).toEqual(expect.any(Number));
            expect(nextDipusteEvidenceList.size).toEqual(expect.any(Number));
        }
    }));
});
//# sourceMappingURL=disputes.test.js.map