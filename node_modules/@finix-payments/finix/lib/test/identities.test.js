"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Identity API', () => {
    let client;
    let identitiesId;
    beforeAll(() => {
        const userName = 'USfJofzcgqeS35jQGh6nUWxn';
        const password = '2cc12030-c165-48fd-83fa-b7da310df3bd';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create an identity for a buyer", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const createIdentityRequest = {
            entity: {
                phone: "7145677613",
                firstName: "Collen",
                lastName: "Wade",
                email: "therock@gmail.com"
            }
        };
        const createdIdentity = yield client.Identities.create(createIdentityRequest);
        expect((_a = createdIdentity.entity) === null || _a === void 0 ? void 0 : _a.firstName).toBe((_b = createIdentityRequest.entity) === null || _b === void 0 ? void 0 : _b.firstName);
        expect((_c = createdIdentity.entity) === null || _c === void 0 ? void 0 : _c.lastName).toBe((_d = createIdentityRequest.entity) === null || _d === void 0 ? void 0 : _d.lastName);
    }));
    test("Test: Create an identity for a merchant", () => __awaiter(void 0, void 0, void 0, function* () {
        var _e, _f, _g, _h;
        const createIdentityRequest = {
            additionalUnderwritingData: {
                merchantAgreementAccepted: true,
                merchantAgreementIpAddress: "42.1.1.113",
                averageAchTransferAmount: 200000,
                annualAchVolume: 200000,
                creditCheckUserAgent: "Mozilla 5.0(Macintosh; IntelMac OS X 10 _14_6)",
                refundPolicy: "MERCHANDISE_EXCHANGE_ONLY",
                creditCheckTimestamp: "2021-04-28T16:42:55Z",
                creditCheckAllowed: true,
                merchantAgreementTimestamp: "2021-04-28T16:42:55Z",
                businessDescription: "BCSB3 vegan cafe",
                averageCardTransferAmount: 200000,
                creditCheckIpAddress: "42.1.1.113",
                merchantAgreementUserAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6)",
                volumeDistributionByBusinessType: {
                    otherVolumePercentage: 0,
                    consumerToConsumerVolumePercentage: 0,
                    businessToConsumerVolumePercentage: 0,
                    businessToBusinessVolumePercentage: 100,
                    personToPersonVolumePercentage: 0,
                },
                cardVolumeDistribution: {
                    cardPresentPercentage: 0,
                    mailOrderTelephoneOrderPercentage: 0,
                    ecommercePercentage: 100,
                }
            },
            tags: {
                "Studio Rating": "4.7"
            },
            entity: {
                lastName: "Sunkhronos",
                firstName: "dwayne",
                email: "user@example.org",
                phone: "1234567890",
                businessType: "INDIVIDUAL_SOLE_PROPRIETORSHIP",
                defaultStatementDescriptor: "example",
                maxTransactionAmount: 100000,
                mcc: "0742",
                businessName: "Finix Flowers",
                businessPhone: "+1 (408) 756-4497",
                businessTaxId: "123456789",
                annualCardVolume: 12000000,
                incorporationDate: {
                    year: 1978,
                    day: 27,
                    month: 6
                },
                url: "www.Finix.com",
                principalPercentageOwnership: 100,
                taxId: "123456789",
                personalAddress: {
                    city: "San Mateo",
                    country: api_1.Models.Country.Usa,
                    region: "CA",
                    line2: "Apartment 7",
                    line1: "741 Douglass St",
                    postalCode: "94114"
                },
                dob: {
                    year: 1978,
                    day: 27,
                    month: 6
                },
                doingBusinessAs: "example",
            }
        };
        const createdIdentity = yield client.Identities.create(createIdentityRequest);
        identitiesId = createdIdentity.id;
        expect((_e = createdIdentity.entity) === null || _e === void 0 ? void 0 : _e.firstName).toBe((_f = createIdentityRequest.entity) === null || _f === void 0 ? void 0 : _f.firstName);
        expect((_g = createdIdentity.entity) === null || _g === void 0 ? void 0 : _g.lastName).toBe((_h = createIdentityRequest.entity) === null || _h === void 0 ? void 0 : _h.lastName);
    }));
    test("Test: Create an associated identity", () => __awaiter(void 0, void 0, void 0, function* () {
        var _j, _k, _l, _m;
        const createIdentityRequest = {
            entity: {
                lastName: "abc",
                firstName: "dwayne",
                phone: "123123123",
                email: "user@example.org",
                personalAddress: {
                    city: "San Mateo",
                    country: "USA",
                    region: "CA",
                    line1: "741 Douglas St",
                    postalCode: "94114"
                }
            }
        };
        const createdIdentity = yield client.Identities.createAssociatedIdentity(identitiesId, createIdentityRequest);
        expect((_j = createdIdentity.entity) === null || _j === void 0 ? void 0 : _j.firstName).toBe((_k = createIdentityRequest.entity) === null || _k === void 0 ? void 0 : _k.firstName);
        expect((_l = createdIdentity.entity) === null || _l === void 0 ? void 0 : _l.lastName).toBe((_m = createIdentityRequest.entity) === null || _m === void 0 ? void 0 : _m.lastName);
    }));
    test("Test: Verify an identity", () => __awaiter(void 0, void 0, void 0, function* () {
        var _o;
        const createVerificationRequest = {
            merchant: "MUgWbPVvtKbzjKNNGKqdQYV7",
            processor: "DUMMY_V1",
            tags: {
                "test_key_01": "test_val"
            }
        };
        try {
            const identityVerification = yield client.Identities.createIdentityVerification(identitiesId, createVerificationRequest);
            expect(identityVerification.merchant).toBe(createVerificationRequest.merchant);
            expect((_o = identityVerification.tags) === null || _o === void 0 ? void 0 : _o["test_key_01"]).toBe("test_val");
        }
        catch (err) {
            // console.log((err as HttpError).body);
            // TODO: Create complete test for identity verification. Can confirm this expected response for these credentials. 
            expect(err.body[0].message).toBe("Application APgPDQrLD52TYvqazjHJJchM has not been underwritten for processing.");
        }
    }));
    test("Test: Fetch an identity", () => __awaiter(void 0, void 0, void 0, function* () {
        var _p, _q;
        const fetchedIdentity = yield client.Identities.get(identitiesId);
        expect((_p = fetchedIdentity.entity) === null || _p === void 0 ? void 0 : _p.firstName).toBe("dwayne");
        expect((_q = fetchedIdentity.entity) === null || _q === void 0 ? void 0 : _q.lastName).toBe("Sunkhronos");
        expect(fetchedIdentity.id).toBe(identitiesId);
    }));
    test("Test: List all identities", () => __awaiter(void 0, void 0, void 0, function* () {
        const client2 = new api_1.Client("USj5xC8quveXhsesHyxB8hJd", "e660f5b1-94c2-46b5-bedf-6ba3466b7d33", api_1.Environment.Sandbox);
        const identitiesList = yield client2.Identities.list();
        expect(identitiesList.page.limit).toEqual(expect.any(Number));
        if (identitiesList.page.hasOwnProperty('offset')) {
            expect(identitiesList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (identitiesList.page.nextCursor != undefined) {
                expect(identitiesList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(identitiesList.size).toEqual(expect.any(Number));
        if (identitiesList.hasMore) {
            const nextIdentitiesList = yield identitiesList.listNext();
            expect(nextIdentitiesList.page.limit).toEqual(expect.any(Number));
            expect(nextIdentitiesList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: Update an identity", () => __awaiter(void 0, void 0, void 0, function* () {
        var _r, _s, _t, _u;
        const updateIdentityRequest = {
            entity: {
                lastName: "Bernard",
                firstName: "Jones",
                email: "user@example.org",
                phone: "7144177878"
            }
        };
        const updatedIdentity = yield client.Identities.update(identitiesId, updateIdentityRequest);
        expect((_r = updatedIdentity.entity) === null || _r === void 0 ? void 0 : _r.firstName).toBe((_s = updateIdentityRequest.entity) === null || _s === void 0 ? void 0 : _s.firstName);
        expect((_t = updatedIdentity.entity) === null || _t === void 0 ? void 0 : _t.lastName).toBe((_u = updateIdentityRequest.entity) === null || _u === void 0 ? void 0 : _u.lastName);
    }));
});
//# sourceMappingURL=identities.test.js.map