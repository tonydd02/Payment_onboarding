"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Onboarding Forms API', () => {
    let client;
    let onboardingFormId;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test('Test: Create an onboarding form', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const onboardingFormRequest = {
            onboardingData: {
                maxTransactionAmount: 100000
            },
            merchantProcessors: [{
                    processor: "LITLE_V1"
                }],
            onboardingLinkDetails: {
                returnUrl: "https://www.finix.com/docs",
                expiredSessionUrl: "https://www.finix.com/",
                termsOfServiceUrl: "https://www.finix.com/terms-and-policies",
                feeDetailsUrl: "https://www.finix.com/docs",
                expirationInMinutes: "30"
            }
        };
        const onboardingForm = yield client.OnboardingForms.create(onboardingFormRequest);
        onboardingFormId = onboardingForm.id;
        expect((_a = onboardingForm.onboardingData) === null || _a === void 0 ? void 0 : _a.maxTransactionAmount).toBe((_b = onboardingFormRequest.onboardingData) === null || _b === void 0 ? void 0 : _b.maxTransactionAmount);
        expect((_c = onboardingForm.merchantProcessors) === null || _c === void 0 ? void 0 : _c[0].processor).toBe((_d = onboardingFormRequest.merchantProcessors) === null || _d === void 0 ? void 0 : _d[0].processor);
    }));
    test('Test: Create an onboarding form link', () => __awaiter(void 0, void 0, void 0, function* () {
        var _e;
        const onboardingLinkRequest = {
            termsOfServiceUrl: "https://www.finix.com/terms-and-policies",
            returnUrl: "https://www.finix.com/docs",
            feeDetailsUrl: "https://www.finix.com/docs",
            expiredSessionUrl: "https://www.finix.com/",
            expirationInMinutes: 30
        };
        const onboardingLink = yield client.OnboardingForms.createLink(onboardingFormId, onboardingLinkRequest);
        expect((_e = onboardingLink.linkUrl) === null || _e === void 0 ? void 0 : _e.includes(onboardingFormId)).toBe(true);
    }));
    test('Test: Fetch an onboarding form', () => __awaiter(void 0, void 0, void 0, function* () {
        var _f, _g;
        const fetchedOnboardingForm = yield client.OnboardingForms.get(onboardingFormId);
        expect((_f = fetchedOnboardingForm.onboardingData) === null || _f === void 0 ? void 0 : _f.maxTransactionAmount).toBe(100000);
        expect((_g = fetchedOnboardingForm.merchantProcessors) === null || _g === void 0 ? void 0 : _g[0].processor).toBe("LITLE_V1");
    }));
});
//# sourceMappingURL=onboardingForms.test.js.map