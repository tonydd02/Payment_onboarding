"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Balance Transfer API', () => {
    let client;
    let balanceTransferID;
    beforeAll(() => {
        const userName = 'USbkjk46XqUTQHN3i2jaVnc1';
        const password = 'ac915962-2757-49ea-aeee-10960a408b99';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create a balance transfer", () => __awaiter(void 0, void 0, void 0, function* () {
        const balanceTransferRequest = {
            tags: {
                "example": "documentation tag"
            },
            description: "Need to increase buffer given the high number of NSFs on merchant fee debits",
            destination: api_1.Models.CreateBalanceTransferRequest.DestinationEnum.ForBenefitOfAccount,
            currency: api_1.Models.Currency.Usd,
            amount: 4000,
            source: api_1.Models.CreateBalanceTransferRequest.SourceEnum.OperatingAccount,
            processorType: "LITLE_V1"
        };
        const createdBalanceTransfer = yield client.BalanceTransfers.create(balanceTransferRequest);
        balanceTransferID = createdBalanceTransfer.id;
        expect(balanceTransferRequest.amount).toBe(createdBalanceTransfer.amount);
        expect(balanceTransferRequest.description).toBe(createdBalanceTransfer.description);
        expect(balanceTransferRequest.source).toBe(createdBalanceTransfer.source);
    }), 10000);
    test("Test: Fetch a balance transfer", () => __awaiter(void 0, void 0, void 0, function* () {
        const fetchedBalanceTransfer = yield client.BalanceTransfers.get(balanceTransferID);
        expect(fetchedBalanceTransfer.id).toBe(balanceTransferID);
        expect(fetchedBalanceTransfer.amount).toBe(4000);
        expect(fetchedBalanceTransfer.source).toBe("OPERATING_ACCOUNT");
    }));
    test("Test: List all balance transfer", () => __awaiter(void 0, void 0, void 0, function* () {
        const balanceTransferList = yield client.BalanceTransfers.list();
        expect(balanceTransferList.page.limit).toEqual(expect.any(Number));
        if (balanceTransferList.page.hasOwnProperty('offset')) {
            expect(balanceTransferList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (balanceTransferList.page.nextCursor != undefined) {
                expect(balanceTransferList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(balanceTransferList.size).toEqual(expect.any(Number));
        if (balanceTransferList.hasMore) {
            const nextBalanceTransferList = yield balanceTransferList.listNext();
            expect(nextBalanceTransferList.page.limit).toEqual(expect.any(Number));
            expect(nextBalanceTransferList.size).toEqual(expect.any(Number));
        }
    }));
});
//# sourceMappingURL=balanceTransfers.test.js.map