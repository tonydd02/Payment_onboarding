"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Settlements API', () => {
    let client;
    beforeAll(() => {
        const userName = 'USpumes23XhzHwXqiy9bfX2B';
        const password = 'c69d39e3-f9ff-4735-8c3e-abca86441906';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Fetch a batch settlement", () => __awaiter(void 0, void 0, void 0, function* () {
        const settlementId = "STmCc8GbjjX33SdymwNhb9Et";
        const fetchedSettlement = yield client.Settlements.get(settlementId);
        expect(fetchedSettlement.id).toBe(settlementId);
        expect(fetchedSettlement.application).toBe("AP3AB2itAWrrrPVS6spvrGYp");
        expect(fetchedSettlement.netAmount).toBe(0);
    }));
    test("Test: List batch settlements", () => __awaiter(void 0, void 0, void 0, function* () {
        const settlementList = yield client.Settlements.list();
        expect(settlementList.page.limit).toEqual(expect.any(Number));
        if (settlementList.page.hasOwnProperty('offset')) {
            expect(settlementList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (settlementList.page.nextCursor != undefined) {
                expect(settlementList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(settlementList.size).toEqual(expect.any(Number));
        if (settlementList.hasMore) {
            const nextSettlementList = yield settlementList.listNext();
            expect(nextSettlementList.page.limit).toEqual(expect.any(Number));
            expect(nextSettlementList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: List transfers in a batch settlements", () => __awaiter(void 0, void 0, void 0, function* () {
        const settlementId = "STmCc8GbjjX33SdymwNhb9Et";
        const transferList = yield client.Settlements.listTransfersBySettlementId(settlementId);
        expect(transferList.page.limit).toEqual(expect.any(Number));
        if (transferList.page.hasOwnProperty('offset')) {
            expect(transferList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (transferList.page.nextCursor != undefined) {
                expect(transferList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(transferList.size).toEqual(expect.any(Number));
        if (transferList.hasMore) {
            const nextTransferList = yield transferList.listNext();
            expect(nextTransferList.page.limit).toEqual(expect.any(Number));
            expect(nextTransferList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: List funding transfers in a batch settlements", () => __awaiter(void 0, void 0, void 0, function* () {
        const settlementId = "STmCc8GbjjX33SdymwNhb9Et";
        const transferList = yield client.Settlements.listFundingTransfers(settlementId);
        expect(transferList.page.limit).toEqual(expect.any(Number));
        if (transferList.page.hasOwnProperty('offset')) {
            expect(transferList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (transferList.page.nextCursor != undefined) {
                expect(transferList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(transferList.size).toEqual(expect.any(Number));
        if (transferList.hasMore) {
            const nextTransferList = yield transferList.listNext();
            expect(nextTransferList.page.limit).toEqual(expect.any(Number));
            expect(nextTransferList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: Remove transfers from batch settlement", () => __awaiter(void 0, void 0, void 0, function* () {
        const settlementId = "STmCc8GbjjX33SdymwNhb9Et";
        try {
            yield client.Settlements.removeTransfersFromSettlement(settlementId, {
                transfers: ["TRr61njQxaa7AJf6E1C3QwCc"]
            });
        }
        catch (error) {
            expect(error.body[0].message).toBe("Unable to process request. Entries [TRr61njQxaa7AJf6E1C3QwCc] not found in settlement STmCc8GbjjX33SdymwNhb9Et");
        }
    }));
});
//# sourceMappingURL=settlements.test.js.map