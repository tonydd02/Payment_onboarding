"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Verifications API', () => {
    let client;
    let verificationId;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create a verification with merchant information", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const createVerificationRequest = {
                merchant: "MUucec6fHeaWo3VHYoSkUySM",
                // instrument: "PI3tfx1Uw3SzHfqwPFGX9o1Y",
                processor: "DUMMY_V1",
                tags: {
                    "test": "verification_test"
                }
            };
            const verification = yield client.Verifications.create(createVerificationRequest);
            // Save id for future test.
            verificationId = verification.id;
            // expect(verification.paymentInstrument).toBe(createVerificationRequest.instrument);
            expect(verification.merchant).toBe(createVerificationRequest.merchant);
            expect(verification.processor).toBe(createVerificationRequest.processor);
        }
        catch (err) {
            // console.log((err as HttpError).body);
            // Do to timing, we may get error that verifications is already going.
            expect(err.body[0].message).toBe("An existing verification is already PENDING.");
            // console.log(err);
        }
    }));
    test("Test: Get a verification", () => __awaiter(void 0, void 0, void 0, function* () {
        const fetchedVerification = yield client.Verifications.get(verificationId);
        expect(fetchedVerification.id).toBe(verificationId);
    }));
    test("Test: List all verification", () => __awaiter(void 0, void 0, void 0, function* () {
        const verificationList = yield client.Verifications.list();
        expect(verificationList.page.limit).toEqual(expect.any(Number));
        if (verificationList.page.hasOwnProperty('offset')) {
            expect(verificationList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (verificationList.page.nextCursor != undefined) {
                expect(verificationList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(verificationList.size).toEqual(expect.any(Number));
        if (verificationList.hasMore) {
            const nextVerificationList = yield verificationList.listNext();
            expect(nextVerificationList.page.limit).toEqual(expect.any(Number));
            expect(nextVerificationList.size).toEqual(expect.any(Number));
        }
    }));
    test("Test: List verification by merchant id", () => __awaiter(void 0, void 0, void 0, function* () {
        const merchantId = "MUucec6fHeaWo3VHYoSkUySM";
        const verificationList = yield client.Verifications.listByMerchantId(merchantId);
        expect(verificationList.page.limit).toEqual(expect.any(Number));
        if (verificationList.page.hasOwnProperty('offset')) {
            expect(verificationList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (verificationList.page.nextCursor != undefined) {
                expect(verificationList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(verificationList.size).toEqual(expect.any(Number));
        if (verificationList.hasMore) {
            const nextVerificationList = yield verificationList.listNext();
            expect(nextVerificationList.page.limit).toEqual(expect.any(Number));
            expect(nextVerificationList.size).toEqual(expect.any(Number));
        }
    }), 10000);
    test("Test: Raw as string", () => __awaiter(void 0, void 0, void 0, function* () {
        const verificationId = "VIcrdHd2vBu5RDZJWNGTQihc";
        const clientTemp = new api_1.Client("USpumes23XhzHwXqiy9bfX2B", "c69d39e3-f9ff-4735-8c3e-abca86441906", api_1.Environment.Sandbox);
        const verification = yield clientTemp.Verifications.get(verificationId);
        expect(verification.raw).toEqual("RawDummyMerchantUnderwriteResult");
    }));
});
//# sourceMappingURL=verifications.test.js.map