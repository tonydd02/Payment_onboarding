"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Webhooks API', () => {
    let client;
    let webhookId;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
        const urlValue = "https://example.com/";
        let webhook;
        webhook = yield client.Webhooks.create({
            url: urlValue
        });
        webhookId = webhook.id;
        // clean up webhooks by disabling
        yield client.Webhooks.update(webhookId, {
            url: urlValue,
            enabled: false
        });
        expect(webhook.url).toBe(urlValue);
        expect(webhook.application).toBe("APgPDQrLD52TYvqazjHJJchM");
    }), 20000);
    test("Test: Fetch a webhook", () => __awaiter(void 0, void 0, void 0, function* () {
        const urlValue = "https://example.com/";
        const fetchedWebhook = yield client.Webhooks.get(webhookId);
        expect(fetchedWebhook.url).toEqual(urlValue);
    }));
    test("Test: List all webhooks", () => __awaiter(void 0, void 0, void 0, function* () {
        const webhookList = yield client.Webhooks.list();
        expect(webhookList.page.limit).toEqual(expect.any(Number));
        if (webhookList.page.hasOwnProperty('offset')) {
            expect(webhookList.page.offset).toEqual(expect.any(Number));
        }
        else {
            if (webhookList.page.nextCursor != undefined) {
                expect(webhookList.page.nextCursor).toEqual(expect.any(String));
            }
        }
        expect(webhookList.size).toEqual(expect.any(Number));
        if (webhookList.hasMore) {
            const nextWebhookList = yield webhookList.listNext();
            expect(nextWebhookList.page.limit).toEqual(expect.any(Number));
            expect(nextWebhookList.size).toEqual(expect.any(Number));
        }
    }), 20000);
    test("Test: Update webhook", () => __awaiter(void 0, void 0, void 0, function* () {
        const urlValue = "https://example.com/";
        const updatedwebHook = yield client.Webhooks.update(webhookId, {
            url: urlValue,
            enabled: true
        });
        expect(updatedwebHook.url).toEqual(urlValue);
        expect(updatedwebHook.enabled).toEqual(true);
        yield client.Webhooks.update(webhookId, {
            url: urlValue,
            enabled: false
        });
    }));
});
//# sourceMappingURL=webhooks.test.js.map