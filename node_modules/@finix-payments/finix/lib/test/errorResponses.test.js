"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Error response', () => {
    let client;
    beforeAll(() => {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: 401 - Unauthorized error wrong password", () => __awaiter(void 0, void 0, void 0, function* () {
        const userName = 'USsRhsHYZGBPnQw8CByJyEQW';
        const wrongPassword = '123';
        try {
            const invalidClient = new api_1.Client(userName, wrongPassword, api_1.Environment.Sandbox);
            yield invalidClient.Transfers.list();
        }
        catch (error) {
            expect(error.statusCode).toBe(401);
            expect(error.body.length).toBeGreaterThan(0);
            expect(error.body[0].message).toBe('Unauthorized');
        }
    }));
    test("Test: 401 - Unauthorized error invalid username", () => __awaiter(void 0, void 0, void 0, function* () {
        const wrongUserName = '12345';
        const password = '8a14c2f9-d94b-4c72-8f5c-a62908e5b30e';
        try {
            const invalidClient = new api_1.Client(wrongUserName, password, api_1.Environment.Sandbox);
            yield invalidClient.Transfers.list();
        }
        catch (error) {
            expect(error.statusCode).toBe(401);
            expect(error.body.length).toBeGreaterThan(0);
            expect(error.body[0].message).toBe('Unauthorized');
        }
    }));
    test("Test: 404 - Not found", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield client.Transfers.list({
                afterCursor: "123"
            });
        }
        catch (error) {
            expect(error.statusCode).toBe(404);
            expect(error.body.length).toBeGreaterThan(0);
            expect(error.body[0].code).toBe('NOT_FOUND');
        }
    }));
    test("Test: 402 - Refused/Declined payments -- declined authorization", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const paymentCardRequest = {
                name: "Amy White",
                expirationYear: 2029,
                tags: {
                    "card_name": "Business Card"
                },
                number: "4000000000009979",
                expirationMonth: 12,
                address: {
                    city: "San Francisco",
                    region: "CA",
                    postalCode: "94404",
                    line1: "900 Metro Center Blv",
                    country: "USA"
                },
                securityCode: "022",
                type: api_1.Models.CreatePaymentInstrumentRequest.TypeEnum.PaymentCard,
                identity: "IDgWxBhfGYLLdkhxx2ddYf9K"
            };
            const createdPaymentInstrument = yield client.PaymentInstruments.create(paymentCardRequest);
            const paymentCardId = createdPaymentInstrument.id;
            yield client.Authorizations.create({
                source: paymentCardId,
                merchant: "MUeDVrf2ahuKc9Eg5TeZugvs",
                amount: 123,
                currency: api_1.Models.Currency.Usd
            });
        }
        catch (error) {
            expect(error.statusCode).toBe(402);
            expect(error.body.length).toBeGreaterThan(0);
            expect(error.body[0].code).toBe('DECLINED');
            expect(error.body[0].authorization).toEqual(expect.any(String));
        }
    }), 10000);
    test("Test: 402 - Refused/Declined payments -- payment declined", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const paymentCardRequest = {
                name: "Amy White",
                expirationYear: 2029,
                tags: {
                    "card_name": "Business Card"
                },
                number: "4111111111111111",
                expirationMonth: 12,
                address: {
                    city: "San Francisco",
                    region: "CA",
                    postalCode: "94404",
                    line1: "900 Metro Center Blv",
                    country: "USA"
                },
                securityCode: "022",
                type: api_1.Models.CreatePaymentInstrumentRequest.TypeEnum.PaymentCard,
                identity: "IDgWxBhfGYLLdkhxx2ddYf9K"
            };
            const createdPaymentInstrument = yield client.PaymentInstruments.create(paymentCardRequest);
            const paymentCardId = createdPaymentInstrument.id;
            let authorization = yield client.Authorizations.create({
                source: paymentCardId,
                merchant: "MUeDVrf2ahuKc9Eg5TeZugvs",
                amount: 123,
                currency: api_1.Models.Currency.Usd
            });
            const authorizationId = authorization.id;
            yield client.Authorizations.update(authorizationId, { captureAmount: 102 });
        }
        catch (error) {
            expect(error.statusCode).toBe(402);
            expect(error.body.length).toBeGreaterThan(0);
            expect(error.body[0].code).toBe('PAYMENT_DECLINED');
            expect(error.body[0].transfer).toEqual(expect.any(String));
        }
    }));
    test("Test: 422 - Refused/Declined payments -- invalid field", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            ;
            const paymentCardRequest = {
                name: "Amy White",
                expirationYear: 1989,
                tags: {
                    "card_name": "Business Card"
                },
                number: "4895142232120006",
                expirationMonth: 12,
                address: {
                    city: "San Francisco",
                    region: "CA",
                    postalCode: "94404",
                    line1: "900 Metro Center Blv",
                    country: "USA"
                },
                securityCode: "022",
                type: api_1.Models.CreatePaymentInstrumentRequest.TypeEnum.PaymentCard,
                identity: "IDgWxBhfGYLLdkhxx2ddYf9K"
            };
            yield client.PaymentInstruments.create(paymentCardRequest);
        }
        catch (error) {
            expect(error.statusCode).toBe(422);
            expect(error.body.length).toBeGreaterThan(0);
            expect(error.body[0].code).toBe('INVALID_FIELD');
            expect(error.body[0].field).toBe('expiration_year');
        }
    }));
});
//# sourceMappingURL=errorResponses.test.js.map