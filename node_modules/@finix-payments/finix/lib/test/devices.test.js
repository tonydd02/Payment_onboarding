"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
describe('Devices API', () => {
    let client;
    let deviceId;
    let merchantId = "MUu56ZGx3Xb6U9gAqKfgNisd";
    beforeAll(() => {
        const userName = 'USjHFGYvecE4LBitYG8KDE2g';
        const password = 'b698f403-d9b7-4157-82d8-162cea8c8cc3';
        client = new api_1.Client(userName, password, api_1.Environment.Sandbox);
    });
    test("Test: Create a device", () => __awaiter(void 0, void 0, void 0, function* () {
        const deviceRequest = {
            name: "Finix triPOS #1",
            model: api_1.Models.CreateDevice.ModelEnum.Mx915,
            description: "Mike Jones",
            configuration: {
                allowDebit: true,
                promptSignature: "NEVER",
                bypassDeviceOnCapture: true
            }
        };
        const createdDevice = yield client.Devices.create(merchantId, deviceRequest);
        deviceId = createdDevice.id;
        expect(createdDevice.merchant).toBe(merchantId);
        expect(createdDevice.description).toBe(deviceRequest.description);
        expect(createdDevice.model).toBe(deviceRequest.model);
    }));
    test("Test: Fetch a device", () => __awaiter(void 0, void 0, void 0, function* () {
        const fetchedDevice = yield client.Devices.get(deviceId);
        expect(fetchedDevice.model).toBe("MX915");
        expect(fetchedDevice.merchant).toBe(merchantId);
        //  expect(fetchedDevice.deviceConfigDetails?.allowDebit).toBe(true);
    }));
    //  test('Test: Update a device' ,async () => {
    //     const deviceUpdateRequest : Models.UpdateDeviceRequest = {
    //         action: "REBOOT"
    //     };
    //     try{
    //         const updatedDevice= await client.Devices.update(deviceId, deviceUpdateRequest);
    //     } catch(error) {
    //         console.log(error.body);
    //     }
    //     // expect(updatedDevice.id).toBe(deviceId);
    //     // expect(updatedDevice.enabled).toBe(true);
    // });
});
//# sourceMappingURL=devices.test.js.map