/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { Authorization } from '../model/authorization';
import { AuthorizationCaptured } from '../model/authorizationCaptured';
import { CreateAuthorizationRequest } from '../model/createAuthorizationRequest';
import { UpdateAuthorizationRequest } from '../model/updateAuthorizationRequest';
import { ListAuthorizationsQueryParams } from '../model/listAuthorizationsQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum AuthorizationsApiApiKeys {
}
export declare class AuthorizationsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AuthorizationsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * If successfully captured, the `transfer` field of the `Authorization` will contain the ID of the `Transfer` resource that\'ll move funds.  Related Guides: [Creating and Capturing an Authorization](/guides/payments/making-a-payment/creating-and-capturing-an-authorization/), [Level 2 and 3 Processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/), [In-Person Cloud Payments](/guides/payments/in-person-payments/cloud/in-person-cloud-payments/), [Buyer Charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Capture an Authorization
     * @param authorizationId ID of &#x60;Authorization&#x60; to fetch.
     * @param updateAuthorizationRequest
     */
    private updateHelper;
    /**
     * If successfully captured, the `transfer` field of the `Authorization` will contain the ID of the `Transfer` resource that\'ll move funds.  Related Guides: [Creating and Capturing an Authorization](/guides/payments/making-a-payment/creating-and-capturing-an-authorization/), [Level 2 and 3 Processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/), [In-Person Cloud Payments](/guides/payments/in-person-payments/cloud/in-person-cloud-payments/), [Buyer Charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Capture an Authorization
     * @param authorizationId ID of &#x60;Authorization&#x60; to fetch.
     * @param updateAuthorizationRequest
     */
    update(authorizationId: string, updateAuthorizationRequest?: UpdateAuthorizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<AuthorizationCaptured>;
    /**
     * If successfully captured, the `transfer` field of the `Authorization` will contain the ID of the `Transfer` resource that\'ll move funds.  Related Guides: [Creating and Capturing an Authorization](/guides/payments/making-a-payment/creating-and-capturing-an-authorization/), [Level 2 and 3 Processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/), [In-Person Cloud Payments](/guides/payments/in-person-payments/cloud/in-person-cloud-payments/), [Buyer Charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Capture an Authorization
     * @param authorizationId ID of &#x60;Authorization&#x60; to fetch.
     * @param updateAuthorizationRequest
     */
    updateHttp(authorizationId: string, updateAuthorizationRequest?: UpdateAuthorizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AuthorizationCaptured;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Create an `Authorization` to process a transaction.  Related Guides: [Creating and Capturing an Authorization](/guides/payments/making-a-payment/creating-and-capturing-an-authorization/), [Level 2 and 3 Processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/), [In-Person Cloud Payments](/guides/payments/in-person-payments/cloud/in-person-cloud-payments/), [Buyer Charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Create an Authorization
     * @param createAuthorizationRequest
     */
    private createHelper;
    /**
     * Create an `Authorization` to process a transaction.  Related Guides: [Creating and Capturing an Authorization](/guides/payments/making-a-payment/creating-and-capturing-an-authorization/), [Level 2 and 3 Processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/), [In-Person Cloud Payments](/guides/payments/in-person-payments/cloud/in-person-cloud-payments/), [Buyer Charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Create an Authorization
     * @param createAuthorizationRequest
     */
    create(createAuthorizationRequest?: CreateAuthorizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Authorization>;
    /**
     * Create an `Authorization` to process a transaction.  Related Guides: [Creating and Capturing an Authorization](/guides/payments/making-a-payment/creating-and-capturing-an-authorization/), [Level 2 and 3 Processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/), [In-Person Cloud Payments](/guides/payments/in-person-payments/cloud/in-person-cloud-payments/), [Buyer Charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Create an Authorization
     * @param createAuthorizationRequest
     */
    createHttp(createAuthorizationRequest?: CreateAuthorizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Authorization;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a previously created `Authorization`.
     * @summary Fetch an Authorization
     * @param authorizationId ID of &#x60;Authorization&#x60; to fetch.
     */
    private getHelper;
    /**
     * Retrieve the details of a previously created `Authorization`.
     * @summary Fetch an Authorization
     * @param authorizationId ID of &#x60;Authorization&#x60; to fetch.
     */
    get(authorizationId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Authorization>;
    /**
     * Retrieve the details of a previously created `Authorization`.
     * @summary Fetch an Authorization
     * @param authorizationId ID of &#x60;Authorization&#x60; to fetch.
     */
    getHttp(authorizationId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Authorization;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Authorizations`.
     * @summary List Authorizations

    */
    private listHelper;
    /**
     * Retrieve a list of `Authorizations`.
     * @summary List Authorizations
     */
    list(listAuthorizationsQueryParams?: ListAuthorizationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Authorizations`.
     * @summary List Authorizations
     */
    listHttp(listAuthorizationsQueryParams?: ListAuthorizationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
