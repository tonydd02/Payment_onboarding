/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateMerchantUnderwritingRequest } from '../model/createMerchantUnderwritingRequest';
import { CreateVerificationRequest } from '../model/createVerificationRequest';
import { Merchant } from '../model/merchant';
import { UpdateMerchantRequest } from '../model/updateMerchantRequest';
import { Verification } from '../model/verification';
import { ListMerchantsQueryParams } from '../model/listMerchantsQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum MerchantsApiApiKeys {
}
export declare class MerchantsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MerchantsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create a `Merchant` to start the underwriting (also called provisioning) process for your seller. `Merchants` must be created under an [`Identity`](/api/tag/Identities).  A bank account must be associated with the previously created `Identity` before a `Merchant` can be succefully onboarded and verified.
     * @summary Create a Merchant
     * @param identityId ID of &#x60;Identity&#x60; to fetch.
     * @param createMerchantUnderwritingRequest
     */
    private createHelper;
    /**
     * Create a `Merchant` to start the underwriting (also called provisioning) process for your seller. `Merchants` must be created under an [`Identity`](/api/tag/Identities).  A bank account must be associated with the previously created `Identity` before a `Merchant` can be succefully onboarded and verified.
     * @summary Create a Merchant
     * @param identityId ID of &#x60;Identity&#x60; to fetch.
     * @param createMerchantUnderwritingRequest
     */
    create(identityId: string, createMerchantUnderwritingRequest?: CreateMerchantUnderwritingRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Merchant>;
    /**
     * Create a `Merchant` to start the underwriting (also called provisioning) process for your seller. `Merchants` must be created under an [`Identity`](/api/tag/Identities).  A bank account must be associated with the previously created `Identity` before a `Merchant` can be succefully onboarded and verified.
     * @summary Create a Merchant
     * @param identityId ID of &#x60;Identity&#x60; to fetch.
     * @param createMerchantUnderwritingRequest
     */
    createHttp(identityId: string, createMerchantUnderwritingRequest?: CreateMerchantUnderwritingRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Merchant;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Verify a `Merchant` if the `onboarding_state` for a `Merchant` returns **FAILED**, or if the correct the seller needs to update the saved in their information `Identity`.  Related Guides: [Onboarding Process](/guides/onboarding/onboarding-process/#reverify-a-merchant)
     * @summary Verify a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60; object.
     * @param createVerificationRequest
     */
    private createMerchantVerificationHelper;
    /**
     * Verify a `Merchant` if the `onboarding_state` for a `Merchant` returns **FAILED**, or if the correct the seller needs to update the saved in their information `Identity`.  Related Guides: [Onboarding Process](/guides/onboarding/onboarding-process/#reverify-a-merchant)
     * @summary Verify a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60; object.
     * @param createVerificationRequest
     */
    createMerchantVerification(merchantId: string, createVerificationRequest?: CreateVerificationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Verification>;
    /**
     * Verify a `Merchant` if the `onboarding_state` for a `Merchant` returns **FAILED**, or if the correct the seller needs to update the saved in their information `Identity`.  Related Guides: [Onboarding Process](/guides/onboarding/onboarding-process/#reverify-a-merchant)
     * @summary Verify a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60; object.
     * @param createVerificationRequest
     */
    createMerchantVerificationHttp(merchantId: string, createVerificationRequest?: CreateVerificationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Verification;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a `Merchant`.
     * @summary Fetch a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60;.
     */
    private getHelper;
    /**
     * Retrieve the details of a `Merchant`.
     * @summary Fetch a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60;.
     */
    get(merchantId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Merchant>;
    /**
     * Retrieve the details of a `Merchant`.
     * @summary Fetch a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60;.
     */
    getHttp(merchantId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Merchant;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Merchants`.
     * @summary List Merchants

    */
    private listHelper;
    /**
     * Retrieve a list of `Merchants`.
     * @summary List Merchants
     */
    list(listMerchantsQueryParams?: ListMerchantsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Merchants`.
     * @summary List Merchants
     */
    listHttp(listMerchantsQueryParams?: ListMerchantsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Update a `Merchant` to:  - Change the `Identity` information saved with the underlying processor - [Enable Level 2/3 processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/) - Enable [buyer charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Update a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60;.
     * @param updateMerchantRequest
     */
    private updateHelper;
    /**
     * Update a `Merchant` to:  - Change the `Identity` information saved with the underlying processor - [Enable Level 2/3 processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/) - Enable [buyer charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Update a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60;.
     * @param updateMerchantRequest
     */
    update(merchantId: string, updateMerchantRequest?: UpdateMerchantRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Merchant>;
    /**
     * Update a `Merchant` to:  - Change the `Identity` information saved with the underlying processor - [Enable Level 2/3 processing](/guides/payments/making-a-payment/level-2-and-level-3-processing/) - Enable [buyer charges](/guides/payments/making-a-payment/buyer-charges/)
     * @summary Update a Merchant
     * @param merchantId ID of &#x60;Merchant&#x60;.
     * @param updateMerchantRequest
     */
    updateHttp(merchantId: string, updateMerchantRequest?: UpdateMerchantRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Merchant;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
