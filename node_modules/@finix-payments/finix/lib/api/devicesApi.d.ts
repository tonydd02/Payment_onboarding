/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateDevice } from '../model/createDevice';
import { Device } from '../model/device';
import { UpdateDeviceRequest } from '../model/updateDeviceRequest';
import { GetDeviceQueryParams } from '../model/getDeviceQueryParams';
import { Authentication, Interceptor } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum DevicesApiApiKeys {
}
export declare class DevicesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DevicesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create a `Device` under a `Merchant`.
     * @summary Create a Device
     * @param merchantId ID of the &#x60;Merchant&#x60; object.
     * @param createDevice
     */
    private createHelper;
    /**
     * Create a `Device` under a `Merchant`.
     * @summary Create a Device
     * @param merchantId ID of the &#x60;Merchant&#x60; object.
     * @param createDevice
     */
    create(merchantId: string, createDevice?: CreateDevice, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Device>;
    /**
     * Create a `Device` under a `Merchant`.
     * @summary Create a Device
     * @param merchantId ID of the &#x60;Merchant&#x60; object.
     * @param createDevice
     */
    createHttp(merchantId: string, createDevice?: CreateDevice, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Device;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of an existing `Device`.  To check the connectivity of the device, include `?include_connection\\=true\\` at the end of the request endpoint.
     * @summary Fetch a Device

    * @param deviceId ID of the &#x60;Device&#x60;.
    *
    */
    private getHelper;
    /**
     * Retrieve the details of an existing `Device`.  To check the connectivity of the device, include `?include_connection\\=true\\` at the end of the request endpoint.
     * @summary Fetch a Device
     * @param deviceId ID of the &#x60;Device&#x60;.
     *
     */
    get(deviceId: string, getDeviceQueryParams?: GetDeviceQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Device>;
    /**
     * Retrieve the details of an existing `Device`.  To check the connectivity of the device, include `?include_connection\\=true\\` at the end of the request endpoint.
     * @summary Fetch a Device
     * @param deviceId ID of the &#x60;Device&#x60;.
     *
     */
    getHttp(deviceId: string, getDeviceQueryParams?: GetDeviceQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Device;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Initiate an action on a `Device`. These actions include activation, rebooting, setting an idle message, or deactivate it.
     * @summary Initiate Action on Device
     * @param deviceId ID of the &#x60;Device&#x60;.
     * @param updateDeviceRequest
     */
    private updateHelper;
    /**
     * Initiate an action on a `Device`. These actions include activation, rebooting, setting an idle message, or deactivate it.
     * @summary Initiate Action on Device
     * @param deviceId ID of the &#x60;Device&#x60;.
     * @param updateDeviceRequest
     */
    update(deviceId: string, updateDeviceRequest?: UpdateDeviceRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Device>;
    /**
     * Initiate an action on a `Device`. These actions include activation, rebooting, setting an idle message, or deactivate it.
     * @summary Initiate Action on Device
     * @param deviceId ID of the &#x60;Device&#x60;.
     * @param updateDeviceRequest
     */
    updateHttp(deviceId: string, updateDeviceRequest?: UpdateDeviceRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Device;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
