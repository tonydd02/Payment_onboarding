/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { PayoutProfile } from '../model/payoutProfile';
import { PayoutProfilesList } from '../model/payoutProfilesList';
import { UpdatePayoutProfile } from '../model/updatePayoutProfile';
import { ListPayoutprofilesQueryParams } from '../model/listPayoutprofilesQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum PayoutProfilesApiApiKeys {
}
export declare class PayoutProfilesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PayoutProfilesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Fetch the the `Payout Profile` createrd for a specific `Merchant`.
     * @summary Fetch Payout Profile by Merchant
     * @param merchantId ID of the &#x60;Merchant&#x60;.
     */
    private fetchPayoutProfilesbyMerchantHelper;
    /**
     * Fetch the the `Payout Profile` createrd for a specific `Merchant`.
     * @summary Fetch Payout Profile by Merchant
     * @param merchantId ID of the &#x60;Merchant&#x60;.
     */
    fetchPayoutProfilesbyMerchant(merchantId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<PayoutProfilesList>;
    /**
     * Fetch the the `Payout Profile` createrd for a specific `Merchant`.
     * @summary Fetch Payout Profile by Merchant
     * @param merchantId ID of the &#x60;Merchant&#x60;.
     */
    fetchPayoutProfilesbyMerchantHttp(merchantId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PayoutProfilesList;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a previously created `Payout Profile`.
     * @summary Fetch a Payout Profile
     * @param payoutProfileId ID of the &#x60;Payout Profile&#x60;.
     */
    private getHelper;
    /**
     * Retrieve the details of a previously created `Payout Profile`.
     * @summary Fetch a Payout Profile
     * @param payoutProfileId ID of the &#x60;Payout Profile&#x60;.
     */
    get(payoutProfileId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<PayoutProfile>;
    /**
     * Retrieve the details of a previously created `Payout Profile`.
     * @summary Fetch a Payout Profile
     * @param payoutProfileId ID of the &#x60;Payout Profile&#x60;.
     */
    getHttp(payoutProfileId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PayoutProfile;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * List all `Payout Profiles`.
     * @summary List Payout Profiles

    */
    private listPayoutprofilesHelper;
    /**
     * List all `Payout Profiles`.
     * @summary List Payout Profiles
     */
    listPayoutprofiles(listPayoutprofilesQueryParams?: ListPayoutprofilesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * List all `Payout Profiles`.
     * @summary List Payout Profiles
     */
    listPayoutprofilesHttp(listPayoutprofilesQueryParams?: ListPayoutprofilesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Update a `Payout Profile` to configure how fees and payouts get calculated, credited, and debited.  By default, `Merchants` get configured with daily net settlements. Payouts get submitted using the **Next-Day ACH** `rail`. Contact [Finix Support](/guides/getting-started/support-at-finix/) to configure payouts on a custom schedule.
     * @summary Update a Payout Profile
     * @param payoutProfileId ID of the &#x60;Payout Profile&#x60;.
     * @param updatePayoutProfile
     */
    private updatePayoutProfileHelper;
    /**
     * Update a `Payout Profile` to configure how fees and payouts get calculated, credited, and debited.  By default, `Merchants` get configured with daily net settlements. Payouts get submitted using the **Next-Day ACH** `rail`. Contact [Finix Support](/guides/getting-started/support-at-finix/) to configure payouts on a custom schedule.
     * @summary Update a Payout Profile
     * @param payoutProfileId ID of the &#x60;Payout Profile&#x60;.
     * @param updatePayoutProfile
     */
    updatePayoutProfile(payoutProfileId: string, updatePayoutProfile?: UpdatePayoutProfile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<PayoutProfile>;
    /**
     * Update a `Payout Profile` to configure how fees and payouts get calculated, credited, and debited.  By default, `Merchants` get configured with daily net settlements. Payouts get submitted using the **Next-Day ACH** `rail`. Contact [Finix Support](/guides/getting-started/support-at-finix/) to configure payouts on a custom schedule.
     * @summary Update a Payout Profile
     * @param payoutProfileId ID of the &#x60;Payout Profile&#x60;.
     * @param updatePayoutProfile
     */
    updatePayoutProfileHttp(payoutProfileId: string, updatePayoutProfile?: UpdatePayoutProfile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PayoutProfile;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
