/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { MerchantProfile } from '../model/merchantProfile';
import { UpdateMerchantProfileRequest } from '../model/updateMerchantProfileRequest';
import { ListMerchantProfilesQueryParams } from '../model/listMerchantProfilesQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum MerchantProfilesApiApiKeys {
}
export declare class MerchantProfilesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MerchantProfilesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Retrieve the details of a previosuly created `merchant_profile`.
     * @summary Fetch a Merchant Profile
     * @param merchantProfileId ID of &#x60;merchant_profile&#x60;.
     */
    private getHelper;
    /**
     * Retrieve the details of a previosuly created `merchant_profile`.
     * @summary Fetch a Merchant Profile
     * @param merchantProfileId ID of &#x60;merchant_profile&#x60;.
     */
    get(merchantProfileId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<MerchantProfile>;
    /**
     * Retrieve the details of a previosuly created `merchant_profile`.
     * @summary Fetch a Merchant Profile
     * @param merchantProfileId ID of &#x60;merchant_profile&#x60;.
     */
    getHttp(merchantProfileId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MerchantProfile;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retireve a list of all `merchant_profiles`.
     * @summary List Merchant Profiles

    */
    private listHelper;
    /**
     * Retireve a list of all `merchant_profiles`.
     * @summary List Merchant Profiles
     */
    list(listMerchantProfilesQueryParams?: ListMerchantProfilesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retireve a list of all `merchant_profiles`.
     * @summary List Merchant Profiles
     */
    listHttp(listMerchantProfilesQueryParams?: ListMerchantProfilesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Update a `merchant_profile`.
     * @summary Update a Merchant Profile
     * @param merchantProfileId ID of &#x60;merchant_profile&#x60;.
     * @param updateMerchantProfileRequest
     */
    private updateHelper;
    /**
     * Update a `merchant_profile`.
     * @summary Update a Merchant Profile
     * @param merchantProfileId ID of &#x60;merchant_profile&#x60;.
     * @param updateMerchantProfileRequest
     */
    update(merchantProfileId: string, updateMerchantProfileRequest?: UpdateMerchantProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<MerchantProfile>;
    /**
     * Update a `merchant_profile`.
     * @summary Update a Merchant Profile
     * @param merchantProfileId ID of &#x60;merchant_profile&#x60;.
     * @param updateMerchantProfileRequest
     */
    updateHttp(merchantProfileId: string, updateMerchantProfileRequest?: UpdateMerchantProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MerchantProfile;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
