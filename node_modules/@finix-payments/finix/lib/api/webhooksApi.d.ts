/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateWebhookRequest } from '../model/createWebhookRequest';
import { UpdateWebhookRequest } from '../model/updateWebhookRequest';
import { Webhook } from '../model/webhook';
import { ListWebhooksQueryParams } from '../model/listWebhooksQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum WebhooksApiApiKeys {
}
export declare class WebhooksApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: WebhooksApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create a `Webhook` to specify an endpoint where Finix can send events.
     * @summary Create a Webhook
     * @param createWebhookRequest
     */
    private createHelper;
    /**
     * Create a `Webhook` to specify an endpoint where Finix can send events.
     * @summary Create a Webhook
     * @param createWebhookRequest
     */
    create(createWebhookRequest?: CreateWebhookRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Webhook>;
    /**
     * Create a `Webhook` to specify an endpoint where Finix can send events.
     * @summary Create a Webhook
     * @param createWebhookRequest
     */
    createHttp(createWebhookRequest?: CreateWebhookRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Webhook;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a `Webhook`.
     * @summary Fetch a Webhook
     * @param webhookId ID of &#x60;Webhook&#x60; object.
     */
    private getHelper;
    /**
     * Retrieve the details of a `Webhook`.
     * @summary Fetch a Webhook
     * @param webhookId ID of &#x60;Webhook&#x60; object.
     */
    get(webhookId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Webhook>;
    /**
     * Retrieve the details of a `Webhook`.
     * @summary Fetch a Webhook
     * @param webhookId ID of &#x60;Webhook&#x60; object.
     */
    getHttp(webhookId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Webhook;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Webhooks`.
     * @summary List Webhooks

    */
    private listHelper;
    /**
     * Retrieve a list of `Webhooks`.
     * @summary List Webhooks
     */
    list(listWebhooksQueryParams?: ListWebhooksQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Webhooks`.
     * @summary List Webhooks
     */
    listHttp(listWebhooksQueryParams?: ListWebhooksQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Update an existing `Webhook`to: - Disable or enable an endpoint URL to recieve webhook events. - Add [authentication to a `Webhook`](/guides/developers/webhooks/#authenticating-webhooks). - Filter the [webhook events sent to an endpoint URL](/guides/developers/webhooks/#webhook-event-filtering).
     * @summary Update a Webhook
     * @param webhookId ID of &#x60;Webhook&#x60; object.
     * @param updateWebhookRequest
     */
    private updateHelper;
    /**
     * Update an existing `Webhook`to: - Disable or enable an endpoint URL to recieve webhook events. - Add [authentication to a `Webhook`](/guides/developers/webhooks/#authenticating-webhooks). - Filter the [webhook events sent to an endpoint URL](/guides/developers/webhooks/#webhook-event-filtering).
     * @summary Update a Webhook
     * @param webhookId ID of &#x60;Webhook&#x60; object.
     * @param updateWebhookRequest
     */
    update(webhookId: string, updateWebhookRequest?: UpdateWebhookRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Webhook>;
    /**
     * Update an existing `Webhook`to: - Disable or enable an endpoint URL to recieve webhook events. - Add [authentication to a `Webhook`](/guides/developers/webhooks/#authenticating-webhooks). - Filter the [webhook events sent to an endpoint URL](/guides/developers/webhooks/#webhook-event-filtering).
     * @summary Update a Webhook
     * @param webhookId ID of &#x60;Webhook&#x60; object.
     * @param updateWebhookRequest
     */
    updateHttp(webhookId: string, updateWebhookRequest?: UpdateWebhookRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Webhook;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
