/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateDisputeEvidenceRequest } from '../model/createDisputeEvidenceRequest';
import { Dispute } from '../model/dispute';
import { DisputeEvidence } from '../model/disputeEvidence';
import { ListDisputeEvidenceQueryParams } from '../model/listDisputeEvidenceQueryParams';
import { ListDisputesQueryParams } from '../model/listDisputesQueryParams';
import { ListDisputesAdjustmentsQueryParams } from '../model/listDisputesAdjustmentsQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum DisputesApiApiKeys {
}
export declare class DisputesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DisputesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Upload dispute evidence for a `Dispute`.  - You can upload up to 8 files; the total size of the uploaded files combined cannot exceed 10 MB. - The allowed file formats include JPG, PNG, PDF, or TIFF. - Individual PNG and JPEG files can\'t exceed 50 KB; PDF and TIFF files can\'t exceed 1 MB.
     * @summary Upload Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     * @param createDisputeEvidenceRequest
     */
    private createDisputeEvidenceHelper;
    /**
     * Upload dispute evidence for a `Dispute`.  - You can upload up to 8 files; the total size of the uploaded files combined cannot exceed 10 MB. - The allowed file formats include JPG, PNG, PDF, or TIFF. - Individual PNG and JPEG files can\'t exceed 50 KB; PDF and TIFF files can\'t exceed 1 MB.
     * @summary Upload Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     * @param createDisputeEvidenceRequest
     */
    createDisputeEvidence(disputeId: string, createDisputeEvidenceRequest?: CreateDisputeEvidenceRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<DisputeEvidence>;
    /**
     * Upload dispute evidence for a `Dispute`.  - You can upload up to 8 files; the total size of the uploaded files combined cannot exceed 10 MB. - The allowed file formats include JPG, PNG, PDF, or TIFF. - Individual PNG and JPEG files can\'t exceed 50 KB; PDF and TIFF files can\'t exceed 1 MB.
     * @summary Upload Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     * @param createDisputeEvidenceRequest
     */
    createDisputeEvidenceHttp(disputeId: string, createDisputeEvidenceRequest?: CreateDisputeEvidenceRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DisputeEvidence;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a previously created `Dispute`.
     * @summary Fetch a Dispute
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch.
     */
    private getHelper;
    /**
     * Retrieve the details of a previously created `Dispute`.
     * @summary Fetch a Dispute
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch.
     */
    get(disputeId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Dispute>;
    /**
     * Retrieve the details of a previously created `Dispute`.
     * @summary Fetch a Dispute
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch.
     */
    getHttp(disputeId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Dispute;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Fetch evidence uploaded for a `Dispute`.   If you don\'t have the Finix Dashboard available, you can fetch the evidence to review the `status` of the upload to confirm the evidence got sent to the processor.
     * @summary Fetch Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch evidence for.
     * @param evidenceId ID of &#x60;evidence&#x60; to fetch.
     */
    private getDisputeEvidenceHelper;
    /**
     * Fetch evidence uploaded for a `Dispute`.   If you don\'t have the Finix Dashboard available, you can fetch the evidence to review the `status` of the upload to confirm the evidence got sent to the processor.
     * @summary Fetch Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch evidence for.
     * @param evidenceId ID of &#x60;evidence&#x60; to fetch.
     */
    getDisputeEvidence(disputeId: string, evidenceId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<DisputeEvidence>;
    /**
     * Fetch evidence uploaded for a `Dispute`.   If you don\'t have the Finix Dashboard available, you can fetch the evidence to review the `status` of the upload to confirm the evidence got sent to the processor.
     * @summary Fetch Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch evidence for.
     * @param evidenceId ID of &#x60;evidence&#x60; to fetch.
     */
    getDisputeEvidenceHttp(disputeId: string, evidenceId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DisputeEvidence;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of dispute evidence for a `Dispute`.
     * @summary List Dispute Evidence

    * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
    *
    */
    private listDisputeEvidenceByDisputeIdHelper;
    /**
     * Retrieve a list of dispute evidence for a `Dispute`.
     * @summary List Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     *
     */
    listDisputeEvidenceByDisputeId(disputeId: string, listDisputeEvidenceQueryParams?: ListDisputeEvidenceQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of dispute evidence for a `Dispute`.
     * @summary List Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     *
     */
    listDisputeEvidenceByDisputeIdHttp(disputeId: string, listDisputeEvidenceQueryParams?: ListDisputeEvidenceQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Disputes`.
     * @summary List Disputes

    */
    private listHelper;
    /**
     * Retrieve a list of `Disputes`.
     * @summary List Disputes
     */
    list(listDisputesQueryParams?: ListDisputesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Disputes`.
     * @summary List Disputes
     */
    listHttp(listDisputesQueryParams?: ListDisputesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * List the adjustment `Transfers` for a `Dispute`. Depending on the stage of the `Dispute`, different adjustment `Transfer` subtypes can be applied.  There are four available subtypes for adjustment `Transfers` in `Disputes`: <ul><li><strong>PLATFORM\\_CREDIT</strong><li><strong>MERCHANT\\_DEBIT</strong><li><strong>MERCHANT\\_CREDIT</strong><li><strong>PLATFORM\\_DEBIT</strong></ul>
     * @summary Fetch Dispute Adjustment Transfers

    * @param disputeId ID of the &#x60;Dispute&#x60; resource.
    *
    */
    private listDisputesAdjustmentsHelper;
    /**
     * List the adjustment `Transfers` for a `Dispute`. Depending on the stage of the `Dispute`, different adjustment `Transfer` subtypes can be applied.  There are four available subtypes for adjustment `Transfers` in `Disputes`: <ul><li><strong>PLATFORM\\_CREDIT</strong><li><strong>MERCHANT\\_DEBIT</strong><li><strong>MERCHANT\\_CREDIT</strong><li><strong>PLATFORM\\_DEBIT</strong></ul>
     * @summary Fetch Dispute Adjustment Transfers
     * @param disputeId ID of the &#x60;Dispute&#x60; resource.
     *
     */
    listDisputesAdjustments(disputeId: string, listDisputesAdjustmentsQueryParams?: ListDisputesAdjustmentsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * List the adjustment `Transfers` for a `Dispute`. Depending on the stage of the `Dispute`, different adjustment `Transfer` subtypes can be applied.  There are four available subtypes for adjustment `Transfers` in `Disputes`: <ul><li><strong>PLATFORM\\_CREDIT</strong><li><strong>MERCHANT\\_DEBIT</strong><li><strong>MERCHANT\\_CREDIT</strong><li><strong>PLATFORM\\_DEBIT</strong></ul>
     * @summary Fetch Dispute Adjustment Transfers
     * @param disputeId ID of the &#x60;Dispute&#x60; resource.
     *
     */
    listDisputesAdjustmentsHttp(disputeId: string, listDisputesAdjustmentsQueryParams?: ListDisputesAdjustmentsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
