/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateAssociatedIdentityRequest } from '../model/createAssociatedIdentityRequest';
import { CreateIdentityRequest } from '../model/createIdentityRequest';
import { CreateVerificationRequest } from '../model/createVerificationRequest';
import { Identity } from '../model/identity';
import { UpdateIdentityRequest } from '../model/updateIdentityRequest';
import { Verification } from '../model/verification';
import { ListIdentitiesQueryParams } from '../model/listIdentitiesQueryParams';
import { ListIdentityAssociatedIdentitiesQueryParams } from '../model/listIdentityAssociatedIdentitiesQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum IdentitiesApiApiKeys {
}
export declare class IdentitiesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: IdentitiesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/onboarding-with-api#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createAssociatedIdentityRequest
     */
    private createAssociatedIdentityHelper;
    /**
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/onboarding-with-api#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createAssociatedIdentityRequest
     */
    createAssociatedIdentity(identityId: string, createAssociatedIdentityRequest?: CreateAssociatedIdentityRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Identity>;
    /**
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/onboarding-with-api#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createAssociatedIdentityRequest
     */
    createAssociatedIdentityHttp(identityId: string, createAssociatedIdentityRequest?: CreateAssociatedIdentityRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Identity;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Create an `Identity` for your seller or buyer.  All fields for a buyer\'s `Identity` are optional.   Providing `business_type` indicates that the `Identity` is being created for a Merchant.  Related Guides: [Getting Started](/guides/getting-started/), [Onboarding](/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest
     */
    private createHelper;
    /**
     * Create an `Identity` for your seller or buyer.  All fields for a buyer\'s `Identity` are optional.   Providing `business_type` indicates that the `Identity` is being created for a Merchant.  Related Guides: [Getting Started](/guides/getting-started/), [Onboarding](/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest
     */
    create(createIdentityRequest?: CreateIdentityRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Identity>;
    /**
     * Create an `Identity` for your seller or buyer.  All fields for a buyer\'s `Identity` are optional.   Providing `business_type` indicates that the `Identity` is being created for a Merchant.  Related Guides: [Getting Started](/guides/getting-started/), [Onboarding](/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest
     */
    createHttp(createIdentityRequest?: CreateIdentityRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Identity;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of &#x60;Identity&#x60; to verify.
     * @param createVerificationRequest
     */
    private createIdentityVerificationHelper;
    /**
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of &#x60;Identity&#x60; to verify.
     * @param createVerificationRequest
     */
    createIdentityVerification(identityId: string, createVerificationRequest?: CreateVerificationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Verification>;
    /**
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of &#x60;Identity&#x60; to verify.
     * @param createVerificationRequest
     */
    createIdentityVerificationHttp(identityId: string, createVerificationRequest?: CreateVerificationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Verification;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     */
    private getHelper;
    /**
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     */
    get(identityId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Identity>;
    /**
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     */
    getHttp(identityId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Identity;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieves a list of `Identities`.
     * @summary List Identities

    */
    private listHelper;
    /**
     * Retrieves a list of `Identities`.
     * @summary List Identities
     */
    list(listIdentitiesQueryParams?: ListIdentitiesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieves a list of `Identities`.
     * @summary List Identities
     */
    listHttp(listIdentitiesQueryParams?: ListIdentitiesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities

    * @param identityId ID of &#x60;Identity&#x60; to associate object with.
    *
    */
    private listAssociatedIdentitiesHelper;
    /**
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     *
     */
    listAssociatedIdentities(identityId: string, listIdentityAssociatedIdentitiesQueryParams?: ListIdentityAssociatedIdentitiesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     *
     */
    listAssociatedIdentitiesHttp(identityId: string, listIdentityAssociatedIdentitiesQueryParams?: ListIdentityAssociatedIdentitiesQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](/api/tag/Merchants/#tag/Merchants/operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     * @param updateIdentityRequest
     */
    private updateHelper;
    /**
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](/api/tag/Merchants/#tag/Merchants/operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     * @param updateIdentityRequest
     */
    update(identityId: string, updateIdentityRequest?: UpdateIdentityRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Identity>;
    /**
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](/api/tag/Merchants/#tag/Merchants/operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     * @param updateIdentityRequest
     */
    updateHttp(identityId: string, updateIdentityRequest?: UpdateIdentityRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Identity;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
