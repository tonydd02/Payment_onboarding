/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateSettlementRequest } from '../model/createSettlementRequest';
import { RemoveSettlementTransfer } from '../model/removeSettlementTransfer';
import { Settlement } from '../model/settlement';
import { ListSettlementFundingTransfersQueryParams } from '../model/listSettlementFundingTransfersQueryParams';
import { ListSettlementTransfersQueryParams } from '../model/listSettlementTransfersQueryParams';
import { ListSettlementsQueryParams } from '../model/listSettlementsQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum SettlementsApiApiKeys {
}
export declare class SettlementsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SettlementsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Close the currently accruing `settlement`.   Finix, by default, creates accruing `settlements` then closes them based on your payout configurations. Use this endpoint to manually close the currently accruing settlement.  The closed `Settlement` will not accrue any further transactions and gets immediately submitted for approval. - Any refunded `Transfers` get included in `Settlements` as a deduction. - **PENDING** `Transfers` don\'t get included in `Settlements`.  - The `total_amount` minus the `total_fee` equals the `net_amount`. The `net_amount` is the amount in cents that gets deposited into the seller\'s bank account.  Related Guides: [Accruing Settlements](/guides/payouts/accruing-settlements/#closing-an-accruing-settlement)
     * @summary Close Current Active Settlement
     * @param identityId ID of the &#x60;Identity&#x60; for the merchant you want to settle.
     * @param createSettlementRequest
     */
    private createHelper;
    /**
     * Close the currently accruing `settlement`.   Finix, by default, creates accruing `settlements` then closes them based on your payout configurations. Use this endpoint to manually close the currently accruing settlement.  The closed `Settlement` will not accrue any further transactions and gets immediately submitted for approval. - Any refunded `Transfers` get included in `Settlements` as a deduction. - **PENDING** `Transfers` don\'t get included in `Settlements`.  - The `total_amount` minus the `total_fee` equals the `net_amount`. The `net_amount` is the amount in cents that gets deposited into the seller\'s bank account.  Related Guides: [Accruing Settlements](/guides/payouts/accruing-settlements/#closing-an-accruing-settlement)
     * @summary Close Current Active Settlement
     * @param identityId ID of the &#x60;Identity&#x60; for the merchant you want to settle.
     * @param createSettlementRequest
     */
    create(identityId: string, createSettlementRequest?: CreateSettlementRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Settlement>;
    /**
     * Close the currently accruing `settlement`.   Finix, by default, creates accruing `settlements` then closes them based on your payout configurations. Use this endpoint to manually close the currently accruing settlement.  The closed `Settlement` will not accrue any further transactions and gets immediately submitted for approval. - Any refunded `Transfers` get included in `Settlements` as a deduction. - **PENDING** `Transfers` don\'t get included in `Settlements`.  - The `total_amount` minus the `total_fee` equals the `net_amount`. The `net_amount` is the amount in cents that gets deposited into the seller\'s bank account.  Related Guides: [Accruing Settlements](/guides/payouts/accruing-settlements/#closing-an-accruing-settlement)
     * @summary Close Current Active Settlement
     * @param identityId ID of the &#x60;Identity&#x60; for the merchant you want to settle.
     * @param createSettlementRequest
     */
    createHttp(identityId: string, createSettlementRequest?: CreateSettlementRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Settlement;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retreive the details of a `Settlement`.
     * @summary Fetch a Settlement
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     */
    private getHelper;
    /**
     * Retreive the details of a `Settlement`.
     * @summary Fetch a Settlement
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     */
    get(settlementId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Settlement>;
    /**
     * Retreive the details of a `Settlement`.
     * @summary Fetch a Settlement
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     */
    getHttp(settlementId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Settlement;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * List the funding `Transfers` that were created when a `Settlement` was approved that have `type` **CREDIT** or **DEBIT**.
     * @summary List Settlement Funding Transfers

    * @param settlementId ID of &#x60;Settlement&#x60; object.
    *
    */
    private listFundingTransfersHelper;
    /**
     * List the funding `Transfers` that were created when a `Settlement` was approved that have `type` **CREDIT** or **DEBIT**.
     * @summary List Settlement Funding Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     *
     */
    listFundingTransfers(settlementId: string, listSettlementFundingTransfersQueryParams?: ListSettlementFundingTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * List the funding `Transfers` that were created when a `Settlement` was approved that have `type` **CREDIT** or **DEBIT**.
     * @summary List Settlement Funding Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     *
     */
    listFundingTransfersHttp(settlementId: string, listSettlementFundingTransfersQueryParams?: ListSettlementFundingTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of every `Transfer` in a `Settlement` that has `type` **DEBIT** or **REFUND**.
     * @summary List Settlement Transfers

    * @param settlementId ID of &#x60;Settlement&#x60; object.
    *
    */
    private listTransfersBySettlementIdHelper;
    /**
     * Retrieve a list of every `Transfer` in a `Settlement` that has `type` **DEBIT** or **REFUND**.
     * @summary List Settlement Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     *
     */
    listTransfersBySettlementId(settlementId: string, listSettlementTransfersQueryParams?: ListSettlementTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of every `Transfer` in a `Settlement` that has `type` **DEBIT** or **REFUND**.
     * @summary List Settlement Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     *
     */
    listTransfersBySettlementIdHttp(settlementId: string, listSettlementTransfersQueryParams?: ListSettlementTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Settlements`.
     * @summary List All Settlements

    */
    private listHelper;
    /**
     * Retrieve a list of `Settlements`.
     * @summary List All Settlements
     */
    list(listSettlementsQueryParams?: ListSettlementsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Settlements`.
     * @summary List All Settlements
     */
    listHttp(listSettlementsQueryParams?: ListSettlementsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Remove a `Transfer` that makes up a `Settlement`.  As long as the `Settlement` hasn\'t been funded, you can remove the `Transfer` or an array of `Transfers`, along with its corresponding `fee` from the encompassing `Settlement`. - Funding `transfers` can\'t be deleted.   > Per the JSON API for deleting a resource, our API doesn\'t have a response body when removing a `Transfer` from a `Settlement`.
     * @summary Delete Settlement Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     * @param removeSettlementTransfer
     */
    private removeTransfersFromSettlementHelper;
    /**
     * Remove a `Transfer` that makes up a `Settlement`.  As long as the `Settlement` hasn\'t been funded, you can remove the `Transfer` or an array of `Transfers`, along with its corresponding `fee` from the encompassing `Settlement`. - Funding `transfers` can\'t be deleted.   > Per the JSON API for deleting a resource, our API doesn\'t have a response body when removing a `Transfer` from a `Settlement`.
     * @summary Delete Settlement Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     * @param removeSettlementTransfer
     */
    removeTransfersFromSettlement(settlementId: string, removeSettlementTransfer?: RemoveSettlementTransfer, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<any>;
    /**
     * Remove a `Transfer` that makes up a `Settlement`.  As long as the `Settlement` hasn\'t been funded, you can remove the `Transfer` or an array of `Transfers`, along with its corresponding `fee` from the encompassing `Settlement`. - Funding `transfers` can\'t be deleted.   > Per the JSON API for deleting a resource, our API doesn\'t have a response body when removing a `Transfer` from a `Settlement`.
     * @summary Delete Settlement Transfers
     * @param settlementId ID of &#x60;Settlement&#x60; object.
     * @param removeSettlementTransfer
     */
    removeTransfersFromSettlementHttp(settlementId: string, removeSettlementTransfer?: RemoveSettlementTransfer, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
