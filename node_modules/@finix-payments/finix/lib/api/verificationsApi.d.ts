/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateVerificationRequest } from '../model/createVerificationRequest';
import { Verification } from '../model/verification';
import { ListMerchantVerificationsQueryParams } from '../model/listMerchantVerificationsQueryParams';
import { ListPaymentInstrumentVerificationsQueryParams } from '../model/listPaymentInstrumentVerificationsQueryParams';
import { ListVerificationsQueryParams } from '../model/listVerificationsQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum VerificationsApiApiKeys {
}
export declare class VerificationsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: VerificationsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create a `Verification` to verify a seller\'s `Identity`.  Verifications can also be created directly on the resources you want to verify. For example: - `POST /merchants/{merchant_id}/verifications` - `POST /payment_instruments/{payment_instrument_id}/verifications`
     * @summary Create a Merchant Verification
     * @param createVerificationRequest
     */
    private createHelper;
    /**
     * Create a `Verification` to verify a seller\'s `Identity`.  Verifications can also be created directly on the resources you want to verify. For example: - `POST /merchants/{merchant_id}/verifications` - `POST /payment_instruments/{payment_instrument_id}/verifications`
     * @summary Create a Merchant Verification
     * @param createVerificationRequest
     */
    create(createVerificationRequest?: CreateVerificationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Verification>;
    /**
     * Create a `Verification` to verify a seller\'s `Identity`.  Verifications can also be created directly on the resources you want to verify. For example: - `POST /merchants/{merchant_id}/verifications` - `POST /payment_instruments/{payment_instrument_id}/verifications`
     * @summary Create a Merchant Verification
     * @param createVerificationRequest
     */
    createHttp(createVerificationRequest?: CreateVerificationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Verification;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a `Verification`.
     * @summary Fetch a Verification
     * @param verificationId ID of &#x60;Verification&#x60; object.
     */
    private getHelper;
    /**
     * Retrieve the details of a `Verification`.
     * @summary Fetch a Verification
     * @param verificationId ID of &#x60;Verification&#x60; object.
     */
    get(verificationId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Verification>;
    /**
     * Retrieve the details of a `Verification`.
     * @summary Fetch a Verification
     * @param verificationId ID of &#x60;Verification&#x60; object.
     */
    getHttp(verificationId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Verification;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Get a list of all the `Verifications` for a `Merchant` resource.
     * @summary List Merchant Verifications

    * @param merchantId ID of &#x60;Merchant&#x60; object.
    *
    */
    private listByMerchantIdHelper;
    /**
     * Get a list of all the `Verifications` for a `Merchant` resource.
     * @summary List Merchant Verifications
     * @param merchantId ID of &#x60;Merchant&#x60; object.
     *
     */
    listByMerchantId(merchantId: string, listMerchantVerificationsQueryParams?: ListMerchantVerificationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Get a list of all the `Verifications` for a `Merchant` resource.
     * @summary List Merchant Verifications
     * @param merchantId ID of &#x60;Merchant&#x60; object.
     *
     */
    listByMerchantIdHttp(merchantId: string, listMerchantVerificationsQueryParams?: ListMerchantVerificationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * List all the `Verifications` created for a `Payment Instrument`.
     * @summary List Payment Instrument Verifications

    * @param paymentInstrumentId ID of &#x60;Payment Instrument &#x60;object.
    *
    */
    private listByPaymentInstrumentIdHelper;
    /**
     * List all the `Verifications` created for a `Payment Instrument`.
     * @summary List Payment Instrument Verifications
     * @param paymentInstrumentId ID of &#x60;Payment Instrument &#x60;object.
     *
     */
    listByPaymentInstrumentId(paymentInstrumentId: string, listPaymentInstrumentVerificationsQueryParams?: ListPaymentInstrumentVerificationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * List all the `Verifications` created for a `Payment Instrument`.
     * @summary List Payment Instrument Verifications
     * @param paymentInstrumentId ID of &#x60;Payment Instrument &#x60;object.
     *
     */
    listByPaymentInstrumentIdHttp(paymentInstrumentId: string, listPaymentInstrumentVerificationsQueryParams?: ListPaymentInstrumentVerificationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Verifications`.
     * @summary List Verifications

    */
    private listHelper;
    /**
     * Retrieve a list of `Verifications`.
     * @summary List Verifications
     */
    list(listVerificationsQueryParams?: ListVerificationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Verifications`.
     * @summary List Verifications
     */
    listHttp(listVerificationsQueryParams?: ListVerificationsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
