/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { BalanceTransfer } from '../model/balanceTransfer';
import { CreateBalanceTransferRequest } from '../model/createBalanceTransferRequest';
import { ListBalanceTransfersQueryParams } from '../model/listBalanceTransfersQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum BalanceTransfersApiApiKeys {
}
export declare class BalanceTransfersApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: BalanceTransfersApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create a `balance_transfer`.
     * @summary Create a Balance Transfer
     * @param createBalanceTransferRequest
     */
    private createHelper;
    /**
     * Create a `balance_transfer`.
     * @summary Create a Balance Transfer
     * @param createBalanceTransferRequest
     */
    create(createBalanceTransferRequest?: CreateBalanceTransferRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<BalanceTransfer>;
    /**
     * Create a `balance_transfer`.
     * @summary Create a Balance Transfer
     * @param createBalanceTransferRequest
     */
    createHttp(createBalanceTransferRequest?: CreateBalanceTransferRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceTransfer;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of a `balance_transfer`.
     * @summary Fetch a Balance Transfer
     * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource.
     */
    private getHelper;
    /**
     * Retrieve the details of a `balance_transfer`.
     * @summary Fetch a Balance Transfer
     * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource.
     */
    get(balanceTransfersId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<BalanceTransfer>;
    /**
     * Retrieve the details of a `balance_transfer`.
     * @summary Fetch a Balance Transfer
     * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource.
     */
    getHttp(balanceTransfersId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceTransfer;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `balance_transfers`.
     * @summary List Balance Transfers

    */
    private listHelper;
    /**
     * Retrieve a list of `balance_transfers`.
     * @summary List Balance Transfers
     */
    list(listBalanceTransfersQueryParams?: ListBalanceTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `balance_transfers`.
     * @summary List Balance Transfers
     */
    listHttp(listBalanceTransfersQueryParams?: ListBalanceTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
