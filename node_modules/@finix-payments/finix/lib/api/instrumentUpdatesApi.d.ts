/**
 * Finix API
 */
/// <reference types="node" />
/// <reference types="node" />
import * as http from 'http';
import { CreateInstrumentUpdateRequest } from '../model/createInstrumentUpdateRequest';
import { InstrumentUpdate } from '../model/instrumentUpdate';
import { DownloadInstrumentUpdateQueryParams } from '../model/downloadInstrumentUpdateQueryParams';
import { Authentication, Interceptor } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum InstrumentUpdatesApiApiKeys {
}
export declare class InstrumentUpdatesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: InstrumentUpdatesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * To update the card details of your customers, create an `instrument_updates` resource. Include the `Payment Instrument` IDs you want to update in a CSV.
     * @summary Create Instrument Updates
     * @param createInstrumentUpdateRequest
     */
    private createHelper;
    /**
     * To update the card details of your customers, create an `instrument_updates` resource. Include the `Payment Instrument` IDs you want to update in a CSV.
     * @summary Create Instrument Updates
     * @param createInstrumentUpdateRequest
     */
    create(createInstrumentUpdateRequest?: CreateInstrumentUpdateRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<InstrumentUpdate>;
    /**
     * To update the card details of your customers, create an `instrument_updates` resource. Include the `Payment Instrument` IDs you want to update in a CSV.
     * @summary Create Instrument Updates
     * @param createInstrumentUpdateRequest
     */
    createHttp(createInstrumentUpdateRequest?: CreateInstrumentUpdateRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: InstrumentUpdate;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Fetch a previously created `instrument_updates` resource as a CSV.   To fetch the `instrument_updates` resource in JSON, add `?format=json` to the request endpoint.
     * @summary Download Instrument Updates

    * @param instrumentUpdatesId The ID of the &#x60;instrument_updates&#x60; resource. This ID was returned when initially creating the &#x60;instrument_updates&#x60; object.
    *
    */
    private downloadHelper;
    /**
     * Fetch a previously created `instrument_updates` resource as a CSV.   To fetch the `instrument_updates` resource in JSON, add `?format=json` to the request endpoint.
     * @summary Download Instrument Updates
     * @param instrumentUpdatesId The ID of the &#x60;instrument_updates&#x60; resource. This ID was returned when initially creating the &#x60;instrument_updates&#x60; object.
     *
     */
    download(instrumentUpdatesId: string, downloadInstrumentUpdateQueryParams?: DownloadInstrumentUpdateQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Buffer>;
    /**
     * Fetch a previously created `instrument_updates` resource as a CSV.   To fetch the `instrument_updates` resource in JSON, add `?format=json` to the request endpoint.
     * @summary Download Instrument Updates
     * @param instrumentUpdatesId The ID of the &#x60;instrument_updates&#x60; resource. This ID was returned when initially creating the &#x60;instrument_updates&#x60; object.
     *
     */
    downloadHttp(instrumentUpdatesId: string, downloadInstrumentUpdateQueryParams?: DownloadInstrumentUpdateQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Fetch a specific `instrument_update` from an `instrument_updates` resource.
     * @summary Fetch an Instrument Update
     * @param instrumentUpdatesId The ID of the &#x60;instrument_update&#x60;.
     */
    private getHelper;
    /**
     * Fetch a specific `instrument_update` from an `instrument_updates` resource.
     * @summary Fetch an Instrument Update
     * @param instrumentUpdatesId The ID of the &#x60;instrument_update&#x60;.
     */
    get(instrumentUpdatesId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<InstrumentUpdate>;
    /**
     * Fetch a specific `instrument_update` from an `instrument_updates` resource.
     * @summary Fetch an Instrument Update
     * @param instrumentUpdatesId The ID of the &#x60;instrument_update&#x60;.
     */
    getHttp(instrumentUpdatesId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: InstrumentUpdate;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
