/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateOnboardingFormLinkRequest } from '../model/createOnboardingFormLinkRequest';
import { CreateOnboardingFormRequest } from '../model/createOnboardingFormRequest';
import { OnboardingForm } from '../model/onboardingForm';
import { OnboardingFormLink } from '../model/onboardingFormLink';
import { Authentication, Interceptor } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum OnboardingFormsApiApiKeys {
}
export declare class OnboardingFormsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: OnboardingFormsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create an `onboarding_form` with the name of the processor you plan to onboard users to and the links they` get redirected to when completing or moving away from the Finix Onboarding Form.  Only **ROLE_PARTNER** credentials can be used to create an `onboarding_form`.
     * @summary Create an Onboarding Form
     * @param createOnboardingFormRequest
     */
    private createHelper;
    /**
     * Create an `onboarding_form` with the name of the processor you plan to onboard users to and the links they` get redirected to when completing or moving away from the Finix Onboarding Form.  Only **ROLE_PARTNER** credentials can be used to create an `onboarding_form`.
     * @summary Create an Onboarding Form
     * @param createOnboardingFormRequest
     */
    create(createOnboardingFormRequest?: CreateOnboardingFormRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<OnboardingForm>;
    /**
     * Create an `onboarding_form` with the name of the processor you plan to onboard users to and the links they` get redirected to when completing or moving away from the Finix Onboarding Form.  Only **ROLE_PARTNER** credentials can be used to create an `onboarding_form`.
     * @summary Create an Onboarding Form
     * @param createOnboardingFormRequest
     */
    createHttp(createOnboardingFormRequest?: CreateOnboardingFormRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: OnboardingForm;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Use the `onboarding_forms` API to create a link that can return users to where they left off completing their Finix Onboarding Form.
     * @summary Create an Onboarding Form Link
     * @param onboardingFormId The ID of the &#x60;onboarding_form&#x60; resource.
     * @param createOnboardingFormLinkRequest
     */
    private createLinkHelper;
    /**
     * Use the `onboarding_forms` API to create a link that can return users to where they left off completing their Finix Onboarding Form.
     * @summary Create an Onboarding Form Link
     * @param onboardingFormId The ID of the &#x60;onboarding_form&#x60; resource.
     * @param createOnboardingFormLinkRequest
     */
    createLink(onboardingFormId: string, createOnboardingFormLinkRequest?: CreateOnboardingFormLinkRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<OnboardingFormLink>;
    /**
     * Use the `onboarding_forms` API to create a link that can return users to where they left off completing their Finix Onboarding Form.
     * @summary Create an Onboarding Form Link
     * @param onboardingFormId The ID of the &#x60;onboarding_form&#x60; resource.
     * @param createOnboardingFormLinkRequest
     */
    createLinkHttp(onboardingFormId: string, createOnboardingFormLinkRequest?: CreateOnboardingFormLinkRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: OnboardingFormLink;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve the details of an `onboarding_form`.
     * @summary Fetch an Onboarding Form
     * @param onboardingFormId The id of the &#x60;onboarding_form&#x60;.
     */
    private getHelper;
    /**
     * Retrieve the details of an `onboarding_form`.
     * @summary Fetch an Onboarding Form
     * @param onboardingFormId The id of the &#x60;onboarding_form&#x60;.
     */
    get(onboardingFormId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<OnboardingForm>;
    /**
     * Retrieve the details of an `onboarding_form`.
     * @summary Fetch an Onboarding Form
     * @param onboardingFormId The id of the &#x60;onboarding_form&#x60;.
     */
    getHttp(onboardingFormId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: OnboardingForm;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
