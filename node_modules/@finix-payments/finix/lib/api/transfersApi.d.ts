/**
 * Finix API
 */
/// <reference types="node" />
import * as http from 'http';
import { CreateReversalRequest } from '../model/createReversalRequest';
import { CreateTransferRequest } from '../model/createTransferRequest';
import { Transfer } from '../model/transfer';
import { UpdateTransferRequest } from '../model/updateTransferRequest';
import { ListTransferReversalsQueryParams } from '../model/listTransferReversalsQueryParams';
import { ListTransfersQueryParams } from '../model/listTransfersQueryParams';
import { Authentication, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';
export declare enum TransfersApiApiKeys {
}
export declare class TransfersApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TransfersApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Helper function.
     * Create a `Transfer`.
     * @summary Create a Transfer
     * @param createTransferRequest
     */
    private createHelper;
    /**
     * Create a `Transfer`.
     * @summary Create a Transfer
     * @param createTransferRequest
     */
    create(createTransferRequest?: CreateTransferRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Transfer>;
    /**
     * Create a `Transfer`.
     * @summary Create a Transfer
     * @param createTransferRequest
     */
    createHttp(createTransferRequest?: CreateTransferRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transfer;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Reverse a transfer with a `type` of **DEBIT**. This reversal creates a new `Transfer` resource with a `type` of **REVERSAL**.   Related Guides: [Refunding Payments](/guides/after-the-payment/refunding-and-cancelling-payments/)
     * @summary Refund or Reverse a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; object.
     * @param createReversalRequest
     */
    private createTransferReversalHelper;
    /**
     * Reverse a transfer with a `type` of **DEBIT**. This reversal creates a new `Transfer` resource with a `type` of **REVERSAL**.   Related Guides: [Refunding Payments](/guides/after-the-payment/refunding-and-cancelling-payments/)
     * @summary Refund or Reverse a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; object.
     * @param createReversalRequest
     */
    createTransferReversal(transferId: string, createReversalRequest?: CreateReversalRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Transfer>;
    /**
     * Reverse a transfer with a `type` of **DEBIT**. This reversal creates a new `Transfer` resource with a `type` of **REVERSAL**.   Related Guides: [Refunding Payments](/guides/after-the-payment/refunding-and-cancelling-payments/)
     * @summary Refund or Reverse a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; object.
     * @param createReversalRequest
     */
    createTransferReversalHttp(transferId: string, createReversalRequest?: CreateReversalRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transfer;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a `Transfer`.
     * @summary Fetch a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; resource.
     */
    private getHelper;
    /**
     * Retrieve a `Transfer`.
     * @summary Fetch a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; resource.
     */
    get(transferId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Transfer>;
    /**
     * Retrieve a `Transfer`.
     * @summary Fetch a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; resource.
     */
    getHttp(transferId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transfer;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of reversals for a `Transfer`.
     * @summary List Reversals on a Transfer

    * @param transferId ID of &#x60;Transfer&#x60; object.
    *
    */
    private listTransfersReversalsHelper;
    /**
     * Retrieve a list of reversals for a `Transfer`.
     * @summary List Reversals on a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; object.
     *
     */
    listTransfersReversals(transferId: string, listTransferReversalsQueryParams?: ListTransferReversalsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of reversals for a `Transfer`.
     * @summary List Reversals on a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; object.
     *
     */
    listTransfersReversalsHttp(transferId: string, listTransferReversalsQueryParams?: ListTransferReversalsQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Retrieve a list of `Transfers`.
     * @summary List Transfers

    */
    private listHelper;
    /**
     * Retrieve a list of `Transfers`.
     * @summary List Transfers
     */
    list(listTransfersQueryParams?: ListTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<finixList<any>>;
    /**
     * Retrieve a list of `Transfers`.
     * @summary List Transfers
     */
    listHttp(listTransfersQueryParams?: ListTransfersQueryParams, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: finixList<any>;
        rawBody: any;
    }>;
    /**
     * Helper function.
     * Update a `Transfer`.
     * @summary Update a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; resource.
     * @param updateTransferRequest
     */
    private updateHelper;
    /**
     * Update a `Transfer`.
     * @summary Update a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; resource.
     * @param updateTransferRequest
     */
    update(transferId: string, updateTransferRequest?: UpdateTransferRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<Transfer>;
    /**
     * Update a `Transfer`.
     * @summary Update a Transfer
     * @param transferId ID of &#x60;Transfer&#x60; resource.
     * @param updateTransferRequest
     */
    updateHttp(transferId: string, updateTransferRequest?: UpdateTransferRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transfer;
        rawBody: any;
    }>;
    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */
    private embeddedHelper;
    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam;
    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam;
}
