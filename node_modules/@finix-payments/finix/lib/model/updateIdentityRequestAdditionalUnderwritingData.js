"use strict";
/**
 * Finix API
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateIdentityRequestAdditionalUnderwritingData = void 0;
/**
* Additional underwriting data that\'s required to verify the `Identity` of merchants.
*/
class UpdateIdentityRequestAdditionalUnderwritingData {
    static getAttributeTypeMap() {
        return UpdateIdentityRequestAdditionalUnderwritingData.attributeTypeMap;
    }
}
exports.UpdateIdentityRequestAdditionalUnderwritingData = UpdateIdentityRequestAdditionalUnderwritingData;
UpdateIdentityRequestAdditionalUnderwritingData.discriminator = undefined;
UpdateIdentityRequestAdditionalUnderwritingData.attributeTypeMap = [
    {
        "name": "annualAchVolume",
        "baseName": "annual_ach_volume",
        "type": "number"
    },
    {
        "name": "averageAchTransferAmount",
        "baseName": "average_ach_transfer_amount",
        "type": "number"
    },
    {
        "name": "averageCardTransferAmount",
        "baseName": "average_card_transfer_amount",
        "type": "number"
    },
    {
        "name": "businessDescription",
        "baseName": "business_description",
        "type": "string"
    },
    {
        "name": "creditCheckAllowed",
        "baseName": "credit_check_allowed",
        "type": "boolean"
    },
    {
        "name": "creditCheckIpAddress",
        "baseName": "credit_check_ip_address",
        "type": "string"
    },
    {
        "name": "creditCheckTimestamp",
        "baseName": "credit_check_timestamp",
        "type": "string"
    },
    {
        "name": "creditCheckUserAgent",
        "baseName": "credit_check_user_agent",
        "type": "string"
    },
    {
        "name": "cardVolumeDistribution",
        "baseName": "card_volume_distribution",
        "type": "UpdateIdentityRequestAdditionalUnderwritingDataCardVolumeDistribution"
    },
    {
        "name": "merchantAgreementAccepted",
        "baseName": "merchant_agreement_accepted",
        "type": "boolean"
    },
    {
        "name": "merchantAgreementIpAddress",
        "baseName": "merchant_agreement_ip_address",
        "type": "string"
    },
    {
        "name": "merchantAgreementTimestamp",
        "baseName": "merchant_agreement_timestamp",
        "type": "string"
    },
    {
        "name": "merchantAgreementUserAgent",
        "baseName": "merchant_agreement_user_agent",
        "type": "string"
    },
    {
        "name": "refundPolicy",
        "baseName": "refund_policy",
        "type": "UpdateIdentityRequestAdditionalUnderwritingData.RefundPolicyEnum"
    },
    {
        "name": "volumeDistributionByBusinessType",
        "baseName": "volume_distribution_by_business_type",
        "type": "UpdateIdentityRequestAdditionalUnderwritingDataVolumeDistributionByBusinessType"
    }
];
(function (UpdateIdentityRequestAdditionalUnderwritingData) {
    let RefundPolicyEnum;
    (function (RefundPolicyEnum) {
        RefundPolicyEnum[RefundPolicyEnum["NoRefunds"] = 'NO_REFUNDS'] = "NoRefunds";
        RefundPolicyEnum[RefundPolicyEnum["MerchandiseExchangeOnly"] = 'MERCHANDISE_EXCHANGE_ONLY'] = "MerchandiseExchangeOnly";
        RefundPolicyEnum[RefundPolicyEnum["Within30DaysOther"] = 'WITHIN_30_DAYS OTHER'] = "Within30DaysOther";
    })(RefundPolicyEnum = UpdateIdentityRequestAdditionalUnderwritingData.RefundPolicyEnum || (UpdateIdentityRequestAdditionalUnderwritingData.RefundPolicyEnum = {}));
})(UpdateIdentityRequestAdditionalUnderwritingData = exports.UpdateIdentityRequestAdditionalUnderwritingData || (exports.UpdateIdentityRequestAdditionalUnderwritingData = {}));
//# sourceMappingURL=updateIdentityRequestAdditionalUnderwritingData.js.map