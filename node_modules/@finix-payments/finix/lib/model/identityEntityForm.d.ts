/**
 * Finix API
 */
import { Address } from './address';
import { IdentityEntityFormBusinessAddress } from './identityEntityFormBusinessAddress';
import { IdentityEntityFormDob } from './identityEntityFormDob';
import { IdentityEntityFormIncorporationDate } from './identityEntityFormIncorporationDate';
/**
* Information needed to verify the identity of the entity.
*/
export declare class IdentityEntityForm {
    /**
    * Assigned amex_Mid value. If included must be 10 or 11 digits.
    */
    'amexMid'?: string | null;
    /**
    * Approximate annual credit card sales expected to be processed in cents by this seller (max 19 characters).
    */
    'annualCardVolume'?: number;
    'businessAddress': IdentityEntityFormBusinessAddress | null;
    /**
    * Merchant\'s full legal business name (If **INDIVIDUAL\\_SOLE\\_PROPRIETORSHIP**, input first name, Full legal last name and middle initial; max 120 characters)
    */
    'businessName': string | null;
    /**
    * Customer service phone number where the merchant can be reached (max 10 characters).
    */
    'businessPhone': string;
    /**
    * Nine digit Tax Identification Number (TIN), Employer Identification Number (EIN). If the `business_type` is **INDIVIDUAL\\_SOLE\\_PROPRIETORSHIP** and they do not have an EIN, use the sole proprietor\'s Social Security Number (SSN).
    */
    'businessTaxId': string;
    /**
    * Include the value that applies the best.
    */
    'businessType': IdentityEntityForm.BusinessTypeEnum | string;
    /**
    * Billing description displayed on the buyer\'s bank or card statement (Length must be between 1 and 20 characters).
    */
    'defaultStatementDescriptor'?: string;
    /**
    * Assigned Discover Mid value.
    */
    'discoverMid'?: string;
    'dob': IdentityEntityFormDob;
    /**
    * Alternate name of the business. If no other name is used use the same value used in `business_name` (max 60 characters).
    */
    'doingBusinessAs': string;
    /**
    * Control person\'s email address where they can be reached (max 100 characters).
    */
    'email': string;
    /**
    * Full legal first name of the merchant\'s principal representative (max 20 characters).
    */
    'firstName': string;
    /**
    * Defaults to **false** if not passed.
    */
    'hasAcceptedCreditCardsPreviously'?: boolean;
    'incorporationDate'?: IdentityEntityFormIncorporationDate | null;
    /**
    * Full legal last name of the merchant\'s principal representative (max 20 characters).
    */
    'lastName': string;
    /**
    * Maximum amount that can be transacted for a single transaction in cents (max 12 characters).
    */
    'maxTransactionAmount'?: number;
    /**
    * The Merchant Category Code ([MCC](http://www.dm.usda.gov/procurement/card/card_x/mcc.pdf)) the seller is classified under.
    */
    'mcc'?: string;
    /**
    * Values can be either: <ul><li><strong>PUBLIC</strong> to indicate a publicly-traded company.<li><strong>PRIVATE</strong> for privately-held businesses.
    */
    'ownershipType'?: IdentityEntityForm.OwnershipTypeEnum | string;
    'personalAddress': Address | null;
    /**
    * Principal\'s phone number (max 10 characters).
    */
    'phone': string;
    /**
    * Percentage of company owned by the principal (min 0; max 100).
    */
    'principalPercentageOwnership'?: number;
    /**
    * The short version of the business name. (Defaults to **null**).
    */
    'shortBusinessName'?: string;
    /**
    * Used and required when onboarding a `Merchant` with a `MCC` of **9311**. The  `tax_authority` is the tax gathering entity (e.g San Francisco Water Authority).
    */
    'taxAuthority'?: string;
    /**
    * Used to verify `tax_id` was provided.
    */
    'taxId': string;
    /**
    * Control person\'s corporate title or role (i.e. Chief Executive Officer, CFO, etc.; max 60 characters).
    */
    'title'?: string | null;
    /**
    * Merchant\'s publicly available website (max 100 characters).
    */
    'url'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace IdentityEntityForm {
    enum BusinessTypeEnum {
        IndividualSoleProprietorship,
        Corporation,
        LimitedLiabilityCompany,
        Partnership,
        LimitedPartnership,
        GeneralPartnership,
        AssociationEstateTrust,
        TaxExemptOrganization,
        InternationalOrganization,
        GovernmentAgency,
        JointVenture
    }
    enum OwnershipTypeEnum {
        Private,
        Public
    }
}
