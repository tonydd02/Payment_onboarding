/**
 * Finix API
 */
import { AdditionalBuyerCharges } from './additionalBuyerCharges';
import { AdditionalHealthcareData } from './additionalHealthcareData';
import { AuthorizationLinks } from './authorizationLinks';
import { CardPresentDetails } from './cardPresentDetails';
import { Currency } from './currency';
/**
* A charge authorization
*/
export declare class Authorization {
    /**
    * The ID of the `Authorization` resource.
    */
    'id'?: string;
    /**
    * Timestamp of when the object was created.
    */
    'createdAt'?: Date;
    /**
    * Timestamp of when the object was last updated.
    */
    'updatedAt'?: Date;
    /**
    * The redirect URL used for 3DS transactions (if supported by the processor).
    */
    '_3dsRedirectUrl'?: string | null;
    /**
    * Details the results of the Address Verification checks.
    */
    'addressVerification'?: string | null;
    'additionalBuyerCharges'?: AdditionalBuyerCharges | null;
    'additionalHealthcareData'?: AdditionalHealthcareData | null;
    /**
    * The total amount that will be debited in cents (e.g. 100 cents to debit $1.00).
    */
    'amount'?: number;
    /**
    * The ID of the `Application` resource the `Authorization` was created under.
    */
    'application'?: string;
    'cardPresentDetails'?: CardPresentDetails | null;
    /**
    * The amount of the  `Authorization`  you would like to capture in cents. Must be less than or equal to the `amount` of the `Authorization`.
    */
    'captureAmount'?: number;
    'currency'?: Currency;
    /**
    * The ID of the activated device.
    */
    'device'?: string | null;
    /**
    * `Authorization` expiration time.
    */
    'expiresAt'?: Date;
    /**
    * The code of the failure so the decline can be handled programmatically. For more info on how to handle the failure, see [Failure Codes](/guides/developers/errors/#failure-codes).
    */
    'failureCode'?: string | null;
    /**
    * A human-readable description of why the transaction was declined. This will also include a suggestion on how to complete the payment.
    */
    'failureMessage'?: string | null;
    /**
    * Details the results of the Security Code Verification checks.
    */
    'securityCodeChecks'?: string | null;
    /**
    * Details if the `Authorization` is void.
    */
    'isVoid'?: boolean;
    /**
    * The ID of the `Merchant` resource the `Authorization` was captured under.
    */
    'merchantIdentity'?: string;
    /**
    * Message field that provides additional details. This field is typically **null**.
    */
    'messages'?: Array<string> | null;
    /**
    * Raw response from the processor.
    */
    'raw'?: object | null;
    /**
    * Details the results of the Security Code Verification che
    */
    'securityCodeVerification'?: string | null;
    /**
    * ID of the `Payment Instrument` where funds get debited.
    */
    'source'?: string;
    /**
    * The state of the `Authorization`.
    */
    'state'?: Authorization.StateEnum | string;
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags'?: {
        [key: string]: string;
    } | null;
    /**
    * Trace ID of the `Authorization`. The processor sends back the `trace_id` so you can track the authorization end-to-end.
    */
    'traceId'?: string;
    /**
    * The ID of the `transfer` resource that gets created when the `Authorization` moves to **SUCCEEDED**.
    */
    'transfer'?: string | null;
    /**
    * Details if the `Authorization` has been voided.
    */
    'voidState'?: string;
    'links'?: AuthorizationLinks;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace Authorization {
    enum StateEnum {
        Canceled,
        Pending,
        Failed,
        Succeeded,
        Unknown
    }
}
