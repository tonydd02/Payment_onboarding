/**
 * Finix API
 */
import { VerificationLinks } from './verificationLinks';
export declare class Verification {
    /**
    * The ID of the `Verification` attempt (begins with `VIXXX`).
    */
    'id'?: string;
    /**
    * Timestamp of when the object was created.
    */
    'createdAt'?: Date;
    /**
    * Timestamp of when the object was last updated.
    */
    'updatedAt'?: Date;
    /**
    * ID of the `Application` the `Merchant` was created under.
    */
    'application'?: string;
    /**
    * ID of the `Identity` that created the `Merchant`.
    */
    'identity'?: string | null;
    /**
    * ID of the `Merchant` resource.
    */
    'merchant'?: string | null;
    /**
    * ID of the `Identity` associated with the `Merchant`.
    */
    'merchantIdentity'?: string | null;
    /**
    * Provides additional details about the verification (e.g why it failed). This field is usually **null**.
    */
    'messages'?: Array<object>;
    /**
    * The `Payment Instrument` that\'ll be used to settle the `Merchant\'s` processed funds.
    */
    'paymentInstrument'?: string | null;
    /**
    * Name of the verification processor.
    */
    'processor'?: string;
    /**
    * Raw response from the processor.
    */
    'raw'?: object | null;
    /**
    * The status of the `Verification` request.
    */
    'state'?: Verification.StateEnum | string;
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags'?: {
        [key: string]: string;
    } | null;
    /**
    * Trace ID of the `Verification`. The processor sends back the `trace_id` so you can track the verification end-to-end.
    */
    'traceId'?: string;
    'links'?: VerificationLinks;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace Verification {
    enum StateEnum {
        Pending,
        Succeeded,
        Failed
    }
}
