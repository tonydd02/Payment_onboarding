/**
 * Finix API
 */
import { Address } from './address';
import { Country } from './country';
import { Currency } from './currency';
import { PaymentInstrumentLinks } from './paymentInstrumentLinks';
/**
*
*/
export declare class PaymentInstrument {
    /**
    * The ID of the `Payment Instrument`.
    */
    'id'?: string;
    /**
    * Timestamp of when the object was created.
    */
    'createdAt'?: Date;
    /**
    * Timestamp of when the object was last updated.
    */
    'updatedAt'?: Date;
    'address'?: Address | null;
    /**
    * Additional address information thatâ€™s required to verify the identity of the merchant.
    */
    'addressVerification'?: PaymentInstrument.AddressVerificationEnum | string;
    /**
    * The ID of the `Application` resource the `Payment Instrument` was created under.
    */
    'application'?: string;
    /**
    * Bank Identification number for the `Payment Instrument`.
    */
    'bin'?: string;
    /**
    * The `brand` of the card saved in the `Payment Instrument`.
    */
    'brand'?: PaymentInstrument.BrandEnum | string;
    /**
    * A custom name you can include to identify the card being used (e.g. **Business Card**).
    */
    'cardName'?: string | null;
    /**
    * The type of payment card saved in the `Payment Instrument`.
    */
    'cardType'?: PaymentInstrument.CardTypeEnum | string;
    'currency'?: Currency;
    /**
    * Details if the `Payment Instrument` resource is enabled. Default value is **true**; set to **false** to disable the `Payment Instrument`.
    */
    'enabled'?: boolean;
    /**
    * Expiration month (e.g. 12 for December).
    */
    'expirationMonth'?: number;
    /**
    * 4-digit expiration year.
    */
    'expirationYear'?: number;
    /**
    * Details if Fast Funds is enabled for the card.
    */
    'fastFundsIndicator'?: string;
    /**
    * Unique ID that represents the tokenized card data.
    */
    'fingerprint'?: string;
    /**
    * The ID of the `Identity` used to create the `Payment Instrument` resource.
    */
    'identity'?: string;
    /**
    * The type of `Payment Instrument`.
    */
    'instrumentType'?: PaymentInstrument.InstrumentTypeEnum | string;
    /**
    * Details what country the card was issued in:<li><strong>USA</strong>: The card was issued inside the United States.<li><strong>NON_USA</strong>: The card was issued outside of the United States.<li><strong>UNKNOWN</strong>: Processor did not return an issuer country for this particular BIN.
    */
    'issuerCountry'?: PaymentInstrument.IssuerCountryEnum | string;
    /**
    * Last four digits of the card or bank account number.
    */
    'lastFour'?: string;
    /**
    * The name of the bank account or card owner.
    */
    'name'?: string | null;
    /**
    * Detailes if the card is enabled to receive push-payments for online gambling payouts.
    */
    'onlineGambingBlockIndicator'?: string;
    'payloadType'?: PaymentInstrument.PayloadTypeEnum | string;
    /**
    * Details if the card is enabled to receive push-to-card disbursements.
    */
    'pushFundsBlockIndicator'?: string;
    /**
    * Details the results of the Card Verification Code check.
    */
    'securityCodeVerification'?: PaymentInstrument.SecurityCodeVerificationEnum | string;
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags'?: {
        [key: string]: string;
    } | null;
    /**
    * Type of `Payment Instrument`.
    */
    'type'?: PaymentInstrument.TypeEnum | string;
    'links'?: PaymentInstrumentLinks;
    /**
    * Details what kind of **BANK_ACCOUNT** is being used.
    */
    'accountType'?: PaymentInstrument.AccountTypeEnum | string;
    /**
    * Details the results of the bank account validation check if `attempt_bank_account_validation_check` is set to **true**.
    */
    'bankAccountValidationCheck'?: PaymentInstrument.BankAccountValidationCheckEnum | string;
    /**
    * The routing number of the bank account.
    */
    'bankCode'?: string;
    'country'?: Country | null;
    /**
    * The last 4 digits of the account number used to create the `Payment Instrument`.
    */
    'maskedAccountNumber'?: string | null;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace PaymentInstrument {
    enum AddressVerificationEnum {
        PostalCodeAndStreetMatch,
        StreetMatch,
        NoAddress,
        PostalCodeMatch,
        NoMatch,
        Unknown,
        NotSupported
    }
    enum BrandEnum {
        Uatp,
        ChinaTUnion,
        Lankapay,
        Mir,
        Mastercard,
        Dankort,
        Interpayment,
        Unknown,
        Verve,
        Visa,
        Troy,
        Discover,
        AmericanExpress,
        Instapayment,
        DinersClubInternational,
        Maestro,
        DinersClub,
        ChinaUnionPay,
        Rupay,
        Jcb
    }
    enum CardTypeEnum {
        Credit,
        HsaFsa,
        NonReloadablePrepaid,
        Debit,
        Unknown,
        ReloadablePrepaid
    }
    enum InstrumentTypeEnum {
        VantivOmniToken,
        PaymentCard,
        ApplePay,
        GooglePay,
        Token,
        Virtual,
        PaymentCardPresent,
        BankAccount,
        SwipedPaymentCard
    }
    enum IssuerCountryEnum {
        Usa,
        Unknown,
        NonUsa
    }
    enum PayloadTypeEnum {
        Destination,
        Source
    }
    enum SecurityCodeVerificationEnum {
        Unmatched,
        Matched,
        Unknown
    }
    enum TypeEnum {
        VantivOmniToken,
        PaymentCard,
        ApplePay,
        GooglePay,
        Token,
        Virtual,
        PaymentCardPresent,
        BankAccount,
        SwipedPaymentCard
    }
    enum AccountTypeEnum {
        Checking,
        Savings
    }
    enum BankAccountValidationCheckEnum {
        Valid,
        Inconclusive,
        NotAttempted,
        Invalid
    }
}
