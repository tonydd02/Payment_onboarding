"use strict";
/**
 * Finix API
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationCaptured = void 0;
/**
* A captured authorization
*/
class AuthorizationCaptured {
    static getAttributeTypeMap() {
        return AuthorizationCaptured.attributeTypeMap;
    }
}
exports.AuthorizationCaptured = AuthorizationCaptured;
AuthorizationCaptured.discriminator = undefined;
AuthorizationCaptured.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "createdAt",
        "baseName": "created_at",
        "type": "Date"
    },
    {
        "name": "updatedAt",
        "baseName": "updated_at",
        "type": "Date"
    },
    {
        "name": "_3dsRedirectUrl",
        "baseName": "3ds_redirect_url",
        "type": "string"
    },
    {
        "name": "additionalBuyerCharges",
        "baseName": "additional_buyer_charges",
        "type": "AdditionalBuyerCharges"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "number"
    },
    {
        "name": "application",
        "baseName": "application",
        "type": "string"
    },
    {
        "name": "cardPresentDetails",
        "baseName": "card_present_details",
        "type": "CardPresentDetails"
    },
    {
        "name": "captureAmount",
        "baseName": "capture_amount",
        "type": "number"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "Currency"
    },
    {
        "name": "device",
        "baseName": "device",
        "type": "string"
    },
    {
        "name": "expiresAt",
        "baseName": "expires_at",
        "type": "Date"
    },
    {
        "name": "externalResponses",
        "baseName": "external_responses",
        "type": "Array<AuthorizationCapturedExternalResponsesInner>"
    },
    {
        "name": "failureCode",
        "baseName": "failure_code",
        "type": "string"
    },
    {
        "name": "failureMessage",
        "baseName": "failure_message",
        "type": "string"
    },
    {
        "name": "idempotencyId",
        "baseName": "idempotency_id",
        "type": "string"
    },
    {
        "name": "isVoid",
        "baseName": "is_void",
        "type": "boolean"
    },
    {
        "name": "merchantIdentity",
        "baseName": "merchant_identity",
        "type": "string"
    },
    {
        "name": "messages",
        "baseName": "messages",
        "type": "Array<string>"
    },
    {
        "name": "raw",
        "baseName": "raw",
        "type": "object"
    },
    {
        "name": "source",
        "baseName": "source",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "AuthorizationCaptured.StateEnum"
    },
    {
        "name": "tags",
        "baseName": "tags",
        "type": "{ [key: string]: string; }"
    },
    {
        "name": "traceId",
        "baseName": "trace_id",
        "type": "string"
    },
    {
        "name": "transfer",
        "baseName": "transfer",
        "type": "string"
    },
    {
        "name": "voidState",
        "baseName": "void_state",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "AuthorizationLinks"
    }
];
(function (AuthorizationCaptured) {
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Canceled"] = 'CANCELED'] = "Canceled";
        StateEnum[StateEnum["Pending"] = 'PENDING'] = "Pending";
        StateEnum[StateEnum["Failed"] = 'FAILED'] = "Failed";
        StateEnum[StateEnum["Succeeded"] = 'SUCCEEDED'] = "Succeeded";
        StateEnum[StateEnum["Unknown"] = 'UNKNOWN'] = "Unknown";
    })(StateEnum = AuthorizationCaptured.StateEnum || (AuthorizationCaptured.StateEnum = {}));
})(AuthorizationCaptured = exports.AuthorizationCaptured || (exports.AuthorizationCaptured = {}));
//# sourceMappingURL=authorizationCaptured.js.map