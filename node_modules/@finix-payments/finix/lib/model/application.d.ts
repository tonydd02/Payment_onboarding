/**
 * Finix API
 */
import { ApplicationLinks } from './applicationLinks';
/**
*
*/
export declare class Application {
    /**
    * ID of the `Application` resource.
    */
    'id'?: string;
    /**
    * Point in time when this object was created.
    */
    'createdAt'?: Date;
    /**
    * Point in time when this object was most recently updated.
    */
    'updatedAt'?: Date;
    /**
    * Details if the `Application` requires CVV code.
    */
    'cardCvvRequired'?: boolean;
    /**
    * Details if the `Application` requires the card\'s expiration date.
    */
    'cardExpirationDateRequired'?: boolean;
    /**
    * Details if the `Application` is automatically set to create `Transfers` once settlement reports get generated.
    */
    'creatingTransferFromReportEnabled'?: boolean;
    /**
    * Details if the `Application` is enabled and active. Set to **false** to disable the `Application`.
    */
    'enabled'?: boolean;
    /**
    * Details when the `fees` of `Authroizations` submitted under the `Application` will be ready to settle.
    */
    'feeReadyToSettleUpon'?: Application.FeeReadyToSettleUponEnum | string;
    /**
    * The name of the `Application`.
    */
    'name'?: string;
    /**
    * ID of the `Identity` resource that created the `Application`.
    */
    'owner'?: string;
    /**
    * Details if transaction processing is enabled for the `Application`.
    */
    'processingEnabled'?: boolean;
    /**
    * Details when `Authroizations` submitted under the `Application` will be ready to settle.
    */
    'readyToSettleUpon'?: Application.ReadyToSettleUponEnum | string;
    /**
    * Details if settlement processing is enabled for the `Application`.
    */
    'settlementEnabled'?: boolean;
    'settlementFundingIdentifier'?: Application.SettlementFundingIdentifierEnum | string;
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags'?: {
        [key: string]: string;
    } | null;
    'links'?: ApplicationLinks;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace Application {
    enum FeeReadyToSettleUponEnum {
        Reconciliation,
        SuccessfulCapture
    }
    enum ReadyToSettleUponEnum {
        Reconciliation,
        SuccessfulCapture
    }
    enum SettlementFundingIdentifierEnum {
        Unset
    }
}
