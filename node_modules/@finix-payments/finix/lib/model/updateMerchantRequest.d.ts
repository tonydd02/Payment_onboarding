/**
 * Finix API
 */
export declare class UpdateMerchantRequest {
    /**
    * Set to **true** to require the card\'s CVV code.
    */
    'cardCvvRequired'?: boolean;
    /**
    * Set to **true** to require the card\'s expiration date.
    */
    'cardExpirationDateRequired'?: boolean;
    /**
    * Set to **true** if you want to enable the `Merchant` to accept convenience fees and/or service fees.
    */
    'convenienceChargesEnabled'?: boolean;
    /**
    * Set to **true** to automatically create `Transfers` once settlement reports get generated.
    */
    'creatingTransferFromReportEnabled'?: boolean;
    /**
    * Details how the `Merchant` settles fees.
    */
    'feeReadyToSettleUpon'?: string;
    /**
    * Set to **true** to enable gross settlements.
    */
    'grossSettlementEnabled'?: boolean;
    /**
    * Set to **true** to enable the `Merchant` for Level 2 and Level 3 processing. Default value is **false**.
    */
    'levelTwoLevelThreeDataEnabled'?: boolean;
    /**
    * The legal name saved in the `Merchant` resource.
    */
    'merchantName'?: string;
    /**
    * Details if transaction processing is enabled for the `Merchant`.
    */
    'processingEnabled'?: boolean;
    /**
    * Details how `Authorizations` captured by the `Merchant` are settled.
    */
    'readyToSettleUpon'?: string;
    /**
    * Set to **true** if you want to enable a `Merchant` to accept rent charges.
    */
    'rentSurchargesEnabled'?: boolean;
    /**
    * Details if settlement processing is enabled for the `Merchant`.
    */
    'settlementEnabled'?: boolean;
    /**
    * Include addtional information (like the MID) when submitting funding `Tranfers` to processors.
    */
    'settlementFundingIdentifier'?: string;
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags'?: {
        [key: string]: string;
    } | null;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
