/**
 * Finix API
 */
import { AdditionalBuyerCharges } from './additionalBuyerCharges';
import { AdditionalHealthcareData } from './additionalHealthcareData';
import { CardPresentDetails } from './cardPresentDetails';
import { Currency } from './currency';
import { FeeType } from './feeType';
import { TransferLinks } from './transferLinks';
/**
*
*/
export declare class Transfer {
    /**
    * The ID of the `Transfer` resource.
    */
    'id'?: string;
    /**
    * Timestamp of when the object was created.
    */
    'createdAt'?: Date;
    /**
    * Timestamp of when the object was last updated.
    */
    'updatedAt'?: Date;
    'additionalBuyerCharges'?: AdditionalBuyerCharges | null;
    'additionalHealthcareData'?: AdditionalHealthcareData | null;
    /**
    * Details the results of the Address Verification checks.
    */
    'addressVerification'?: string | null;
    /**
    * The total amount that will be debited in cents (e.g. 100 cents to debit $1.00).
    */
    'amount'?: number;
    /**
    * Details the `amount` that was requested to get debited from the `source` when the transaction was created.
    */
    'amountRequested'?: number;
    /**
    * The ID of the `Application` the `Transfer` was created under.
    */
    'application'?: string;
    'cardPresentDetails'?: CardPresentDetails | null;
    'currency'?: Currency;
    /**
    * The ID of the destination.
    */
    'destination'?: string | null;
    /**
    * The ID of the `Device` resource the `Transfer` was created under.
    */
    'device'?: string;
    /**
    * Details if the `Transfer` will be settled externally by card processors.
    */
    'externallyFunded'?: string;
    /**
    * The code of the failure so the decline can be handled programmatically. For more info on how to handle the failure, see [Failure Codes](/guides/developers/errors/#failure-codes).
    */
    'failureCode'?: string | null;
    /**
    * A human-readable description of why the transaction was declined. This will also include a suggestion on how to complete the payment.
    */
    'failureMessage'?: string | null;
    /**
    * The amount of the `Transfer` you\'d like to collect as your fee in cents. Defaults to zero (must be less than or equal to the `amount`).
    */
    'fee'?: number;
    'feeType'?: FeeType;
    /**
    * ID to [idempotently](/api/overview/#section/Idempotency-Requests) identifty the transfer.
    */
    'idempotencyId'?: string | null;
    /**
    * The ID of the `Merchant` the `Authorization` was created under.
    */
    'merchantIdentity'?: string;
    /**
    * Message field that provides additional details. This field is typically **null**.
    */
    'messages'?: Array<string> | null;
    /**
    * Raw response from the processor.
    */
    'raw'?: object | null;
    /**
    * Timestamp of when the `Transfer` is ready to be settled at.
    */
    'readyToSettleAt'?: Date | null;
    /**
    * Details the results of the Security Code Verification checks.
    */
    'securityCodeVerification'?: string | null;
    /**
    * The ID of the `Payment Instrument` that will be debited and performing the `Transfer`.
    */
    'source'?: string | null;
    /**
    * The stauts of the `Transfer`.
    */
    'state'?: Transfer.StateEnum | string;
    /**
    * <li>The description of the seller that appears on the buyer\'s bank or card statement.</li><li><kbd>statement_descriptors</kbd> for `Transfers` in <strong>live</strong> enviroments will have a <kbd>FI*</kbd> prefix.
    */
    'statementDescriptor'?: string | null;
    /**
    * Additional information describing the `payment_type`.
    */
    'subtype'?: Transfer.SubtypeEnum | string;
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags'?: {
        [key: string]: string;
    } | null;
    /**
    * Trace ID of the `Transfer`. The processor sends back the `trace_id` so you can track the `Transfer` end-to-end.
    */
    'traceId'?: string | null;
    /**
    * Type of `Transfer`.
    */
    'type'?: Transfer.TypeEnum | string;
    'links'?: TransferLinks;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace Transfer {
    enum StateEnum {
        Canceled,
        Pending,
        Failed,
        Succeeded,
        Unknown
    }
    enum SubtypeEnum {
        Api,
        ApplicationFee,
        Dispute,
        MerchantCredit,
        MerchantCreditAdjustment,
        MerchantDebit,
        MerchantDebitAdjustment,
        PlatformCredit,
        PlatformCreditAdjustment,
        PlatformDebit,
        PlatformDebitAdjustment,
        PlatformFee,
        SettlementMerchant,
        SettlementNoop,
        SettlementPartner,
        SettlementPlatform,
        SplitPayout,
        SplitPayoutAdjustment,
        System
    }
    enum TypeEnum {
        Debit,
        Credit,
        Reversal,
        Fee,
        Adjustment,
        Dispute,
        Reserve,
        Settlement,
        Unknown
    }
}
